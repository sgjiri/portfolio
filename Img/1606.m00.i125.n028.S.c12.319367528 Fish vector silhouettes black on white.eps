%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1606.m00.i125.n028.S.c12.319367528 Fish vector silhouettes black on white.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: Anton
%%CreationDate: 6/25/2016
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.0 x256 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1606.m00.i125.n049.S.c12.people infographic</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-06-25T10:32:42+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-06-25T10:32:42+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-06-25T10:32:42+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxjzp+ZvkTyVC&#xA;snmXWILB5F5RWxLSXDjpVIYw8hFdq8aYq8A/MX/nMSO69DT/AMvx9RZ2P1vWtVgJRFH2fRhjMzGv&#xA;dnT/AGPcKsMl/wCcnvzc0mSG7n8w6ZrUDh/Rtra3jVXYCgMwMMEyIC1afCzdjSuKpp+VP/OTH5oa&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:8919f922-7124-934e-a7c0-e2e1666bc1b9</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:8919f922-7124-934e-a7c0-e2e1666bc1b9</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:41d15ae7-5745-4ef0-a088-f677b556da03</stRef:instanceID>
            <stRef:documentID>xmp.did:512b938d-ec28-ee4c-b73e-7da76f7a94d1</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4239c0b2-9560-5644-9c1b-2d4eaefa5ca4</stEvt:instanceID>
                  <stEvt:when>2015-03-29T08:26:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a613b13b-ad44-5047-9dbf-0017b945326e</stEvt:instanceID>
                  <stEvt:when>2016-03-03T19:26:51+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:baa8e3d8-32e8-264e-85e2-479b96a27290</stEvt:instanceID>
                  <stEvt:when>2016-03-06T20:07:54+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ce46f36d-f392-8f4f-b963-3b49e15db26a</stEvt:instanceID>
                  <stEvt:when>2016-05-05T19:09:50+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e8f4e6ec-c085-cd44-8c60-aa4a5070d376</stEvt:instanceID>
                  <stEvt:when>2016-05-05T19:17:46+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8919f922-7124-934e-a7c0-e2e1666bc1b9</stEvt:instanceID>
                  <stEvt:when>2016-06-25T10:32:42+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Белый</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Черный</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
356.283 39.0397 mo
355.935 37.546 355.528 35.5855 355.344 33.9123 cv
355.528 32.2391 355.935 30.2786 356.283 28.785 cv
356.586 27.4823 356.116 27.2221 355.033 28.0074 cv
353.403 29.1897 350.67 30.7581 346.756 31.6763 cv
345.901 31.877 345.126 31.9391 344.394 31.8871 cv
345.103 31.5802 345.858 31.0475 345.874 30.158 cv
345.902 28.6279 324.606 14.2028 306.343 22.5698 cv
306.244 22.6132 306.141 22.6538 306.043 22.6988 cv
305.636 22.8857 305.246 23.0901 304.865 23.302 cv
304.813 23.3299 304.76 23.3553 304.708 23.3836 cv
304.717 23.3859 li
300.666 25.6915 298.104 29.3498 296.592 33.0237 cv
296.439 33.3948 296.499 33.7391 296.713 33.7878 cv
297.101 33.876 li
297.101 33.876 296.933 33.9552 296.713 33.9643 cv
295.862 33.9993 297.044 35.1796 297.234 35.5331 cv
298.318 37.5498 300.815 41.0931 305.153 43.5926 cv
305.147 43.594 li
322.508 54.7077 338.2 41.5242 343.912 38.4296 cv
346.166 37.2083 344.951 36.156 343.882 35.5868 cv
344.822 35.4233 345.77 35.4252 346.756 35.6564 cv
350.753 36.5941 353.519 38.3758 355.136 39.7051 cv
356.169 40.5546 356.586 40.3423 356.283 39.0397 cv
cp
0 0 0 rgb
f
274.469 156.241 mo
272.801 156.241 261.027 163.854 261.027 163.854 cv
254.974 163.854 249.868 163.192 245.257 162.228 cv
247.299 161.171 249.61 159.226 249.916 155.775 cv
250.292 154.497 237.949 157.042 222.845 156.168 cv
222.845 156.168 222.849 156.172 222.85 156.174 cv
217.091 154.913 210.806 154.256 202.873 155.107 cv
187.251 156.785 182.37 160.651 181.003 163.395 cv
180.416 163.395 li
179.875 163.395 179.437 163.834 179.437 164.375 cv
179.437 164.694 179.592 164.975 179.829 165.154 cv
179.592 165.333 179.437 165.614 179.437 165.933 cv
179.437 166.474 179.875 166.912 180.416 166.912 cv
180.51 166.912 li
180.563 172.969 182.051 192.201 204.088 192.201 cv
217.996 192.201 227.459 185.887 232.103 179.817 cv
233.031 178.605 233.937 177.318 235.32 176.103 cv
241.371 178.908 254.139 176.3 253.858 175.344 cv
250.788 173.853 248.703 172.362 247.566 171.45 cv
250.993 170.95 255.277 170.658 260.701 170.658 cv
260.701 170.658 272.375 176.327 274.631 176.327 cv
277.223 176.327 276.089 156.241 274.469 156.241 cv
cp
f
156.207 25.2559 mo
155.269 23.8615 149.129 27.3993 145.281 28.7704 cv
143.334 23.0324 139.631 20.276 139.631 20.276 cv
139.631 20.276 139.631 20.276 139.979 19.6961 cv
139.631 19.2321 137.775 18.8841 137.775 18.8841 cv
137.775 18.8841 137.775 18.8841 137.659 17.9563 cv
137.079 17.3764 133.751 18.4317 133.751 18.4317 cv
133.751 18.4317 134.713 17.8727 135.687 16.1005 cv
134.527 15.5206 129.745 17.7795 129.745 17.7795 cv
129.745 17.7795 130.738 16.91 131.396 15.2886 cv
130.004 14.3607 125.587 17.4211 125.587 17.4211 cv
125.587 17.4211 126.176 16.5644 127.104 14.9407 cv
125.828 14.1288 121.82 17.3577 121.82 17.3577 cv
121.82 17.3577 122.001 16.5644 122.697 15.1726 cv
121.537 14.7087 116.318 17.6083 114.659 20.2875 cv
114.661 20.2886 li
104.405 23.8366 95.073 34.9806 94.4237 35.7898 cv
93.2961 37.1951 99.1009 36.8914 97.1696 37.0102 cv
90.5591 37.417 99.4909 42.9241 109.966 45.0598 cv
111.949 45.4641 113.752 45.7562 115.424 45.9535 cv
117.492 48.0539 123.004 53.3514 125.415 53.1323 cv
127.219 52.283 127.378 48.3639 126.483 45.8654 cv
128.703 45.5513 130.884 45.0834 133.259 44.5422 cv
138.015 44.9195 146.001 44.8529 145.605 41.6908 cv
145.312 39.3454 144.896 36.682 144.173 35.3549 cv
147.04 36.4574 155.175 41.9638 154.244 39.1041 cv
152.797 34.6603 160.031 30.9399 156.207 25.2559 cv
cp
f
271.336 29.2882 mo
270.512 22.1126 261.454 25.8768 251.456 29.4058 cv
246.647 31.1028 242.544 29.6157 237.567 27.616 cv
242.939 25.8936 239.681 23.2453 238.516 22.5039 cv
238.398 22.0334 238.281 21.0923 236.516 20.8571 cv
236.163 20.2689 236.046 19.2102 234.281 18.9749 cv
234.046 18.5044 233.34 17.681 231.693 17.2104 cv
231.34 16.6222 230.282 15.4459 228.4 15.3283 cv
227.929 14.7401 226.4 14.152 222.518 15.3283 cv
220.029 14.7873 217.442 18.9237 216.128 22.703 cv
198.164 22.7518 186.017 27.5601 178.876 32.229 cv
175.818 34.2288 197.15 50.9685 217.738 47.0995 cv
219.989 46.6766 222.229 46.1455 224.44 45.6086 cv
226.798 49.3519 229.996 53.6016 231.811 53.0974 cv
233.928 52.5092 233.575 49.686 234.517 49.5684 cv
235.575 49.0979 236.046 46.5099 235.81 46.0394 cv
236.141 45.3024 237.05 44.4388 236.257 43.2152 cv
242.013 42.6152 247.232 43.4748 251.456 48.1095 cv
259.925 57.4025 269.101 52.8148 267.807 45.2963 cv
266.513 37.7777 272.159 36.4638 271.336 29.2882 cv
cp
f
371.391 100.822 mo
371.391 99.1229 378 93.2281 376.031 92.6922 cv
369.921 91.0294 363.531 98.0511 359.958 98.0511 cv
358.476 98.0511 355.991 97.7947 352.848 97.3785 cv
355.629 94.7332 347.459 94.7511 338.148 95.1502 cv
338.365 95.2121 li
336.205 94.8738 333.986 94.5255 331.748 94.1786 cv
333.151 93.3491 334.499 92.2962 334.188 91.4403 cv
333.576 89.7553 331.737 83.9342 330.205 80.5641 cv
328.748 77.3568 319.385 86.217 314.523 91.7023 cv
306.24 90.6691 299.523 90.1909 297.259 91.0845 cv
290.471 93.764 276.337 100.373 276.337 100.373 cv
276.337 103.41 292.258 113.949 303.154 113.949 cv
309.077 113.949 317.426 113.948 324.848 113.604 cv
326.758 115.626 330.918 119.386 336.118 120.271 cv
334.07 115.526 332.019 113.435 332.019 113.435 cv
332.019 113.435 331.852 113.325 331.564 113.158 cv
334.94 112.847 337.775 112.412 339.595 111.806 cv
339.709 111.767 339.824 111.726 339.939 111.686 cv
344.02 114.309 351.768 118.372 352.12 116.033 cv
352.486 113.597 352.603 109.538 352.688 108.348 cv
352.735 107.684 351.456 107.232 350.316 106.963 cv
353.422 105.574 356.582 104.482 359.78 104.482 cv
361.22 104.482 372.063 110.749 376.031 108.769 cv
378.178 107.697 371.391 103.95 371.391 100.822 cv
cp
f
159.015 164.902 mo
152.219 161.787 149.104 170.707 146.839 169.433 cv
146.583 169.289 146.323 169.144 146.063 168.999 cv
148.612 166.354 149.357 160.835 148.113 158.743 cv
142.733 162.708 134.379 158.106 129.423 157.752 cv
125.222 157.452 122.703 159.038 120.867 161.511 cv
118.76 162.035 116.871 163.115 115.311 164.922 cv
112.454 168.23 110.254 173.198 110.048 175.743 cv
110.029 175.98 110.445 175.948 110.538 176.561 cv
110.538 176.561 108.96 177.334 110.162 178.715 cv
111.113 179.809 114.067 183.876 121.538 185.481 cv
125.587 189.429 135.564 190.511 135.653 187.415 cv
135.682 186.427 134.87 185.813 133.792 185.426 cv
134.537 185.225 135.24 184.986 135.907 184.717 cv
145.622 189.759 155.752 180.16 146.083 175.13 cv
146.507 174.383 146.846 173.736 147.122 173.256 cv
148.575 170.724 148.821 177.503 156.608 181.185 cv
166.236 177.645 156.467 170.99 159.015 164.902 cv
cp
f
33.7596 37.2214 mo
33.2487 37.2244 32.7581 37.1649 32.3135 36.989 cv
32.7222 36.9215 33.1194 36.8323 33.502 36.7233 cv
33.552 36.8501 33.6362 37.0316 33.7596 37.2214 cv
cp
67.3357 40.6059 mo
66.7786 36.973 67.054 34.5933 67.5335 31.0285 cv
68.2511 25.6936 67.5548 22.3957 66.0415 17.646 cv
63.8849 17.8766 61.7835 18.2898 59.6095 18.435 cv
55.2311 18.7274 52.1771 20.6753 49.2593 25.4438 cv
49.2155 25.5156 49.1459 25.652 49.0595 25.833 cv
44.7398 25.8277 40.954 23.5227 36.3018 23.0711 cv
41.1399 21.061 46.9268 24.9592 49.1128 23.4514 cv
51.5296 21.7844 54.0506 17.2508 53.0196 17.6548 cv
46.4503 20.2288 40.0957 14.477 34.2933 23.0002 cv
33.2417 23.0322 32.1418 23.1748 30.9794 23.4699 cv
25.45 24.8733 18.9225 27.3337 18.715 28.4923 cv
18.3799 30.3634 21.7308 34.4995 27.5614 36.5676 cv
28.9339 37.0544 30.2346 37.1836 31.4415 37.0933 cv
31.6415 37.8365 32.3132 39.5234 34.2674 39.2662 cv
36.7605 38.9382 38.9559 38.9928 39.7745 39.7037 cv
40.5931 40.4145 40.0722 37.954 38.3605 37.1338 cv
38.3239 37.1162 38.2829 37.1063 38.2449 37.0911 cv
39.097 36.8894 39.7881 36.8489 40.1718 37.0547 cv
40.868 37.4282 40.2305 35.6516 38.8393 35.3811 cv
37.5924 35.1386 35.6341 36.7512 34.1291 36.5236 cv
36.6803 35.6397 38.5442 34.0528 39.3567 33.7117 cv
40.7641 33.1208 47.1687 33.6326 48.7393 33.8102 cv
48.8527 33.823 48.961 33.8143 49.0669 33.7962 cv
49.0672 33.7974 49.0676 33.7996 49.0678 33.8007 cv
50.2485 38.9445 62.9885 52.1883 68.7486 50.0972 cv
69.3217 49.8891 67.7134 43.0692 67.3357 40.6059 cv
cp
f
164.621 317.228 mo
163.08 317.083 161.289 318.739 159.516 320.129 cv
161.7 317.711 163.053 314.703 163.273 311.912 cv
158.788 315.4 151.065 304.687 139.853 302.03 cv
132.434 300.271 127.352 306.064 123.85 309.682 cv
123.648 309.707 123.447 309.723 123.243 309.753 cv
116.786 310.704 115.476 316.24 113.776 319.719 cv
112.88 321.552 112.447 322.293 111.464 322.812 cv
110.511 323.314 112.089 323.552 112.089 323.827 cv
112.089 324.134 111.282 324.243 111.334 324.529 cv
111.461 325.226 112.01 325.206 112.479 326.247 cv
113.731 329.03 116.434 333.931 120.354 336.791 cv
120.854 338.67 122.128 340.785 122.128 340.785 cv
122.128 340.785 129.203 348.307 134.982 349.347 cv
134.482 347.63 133.665 346.257 132.669 345.098 cv
133.604 345.451 134.537 345.696 135.412 345.758 cv
134.685 343.995 133.554 342.78 132.257 341.835 cv
135.741 343.739 138.583 345.536 143.424 344.8 cv
152.944 343.351 153.224 337.325 160.034 336.329 cv
159.575 333.82 158.191 331.089 156.163 328.807 cv
158.951 329.76 162.903 334.208 165.037 333.242 cv
167.934 331.93 168.432 317.584 164.621 317.228 cv
cp
f
431.622 92.2592 mo
430.27 92.2592 429.138 95.5628 427.988 97.8937 cv
427.168 90.9594 424.594 82.1593 417.937 80.7199 cv
409.985 79.0006 404.624 87.783 401.988 93.0032 cv
396.232 97.3988 398.134 105.828 396.076 105.828 cv
394.105 105.828 393.003 108.089 394.859 108.147 cv
394.105 108.147 393.989 109.249 397.642 109.249 cv
400.146 109.249 401.098 112.19 405.667 114.041 cv
407.381 116.809 411.522 120.632 411.704 119.425 cv
411.762 119.043 411.741 118.333 411.524 117.525 cv
413.052 118.358 414.4 118.814 414.326 118.241 cv
414.255 117.682 413.754 116.356 412.581 115.448 cv
412.703 115.455 412.831 115.46 412.955 115.466 cv
415.816 117.038 419.553 118.453 424.026 118.759 cv
427.953 119.028 428.287 111.023 428.314 104.63 cv
430.297 105.933 432.215 108.901 433.709 108.901 cv
435.246 108.901 435.507 104.696 435.507 100.725 cv
435.507 95.6804 432.599 92.2592 431.622 92.2592 cv
cp
f
349.133 135.771 mo
354.373 132.473 358.759 130.874 365.26 128.509 cv
359.181 128.087 341.45 139.486 330.642 143.961 cv
320.412 148.197 318.125 152.431 315.69 154.591 cv
303.384 158.166 305.191 169.207 294.25 169.207 cv
291.295 169.207 290.957 172.754 295.094 172.754 cv
302.032 172.754 301.371 181.817 310.205 185.049 cv
312.327 188.402 316.656 192.42 320.087 193.778 cv
319.243 192.572 318.292 190.99 317.417 189.454 cv
318.681 190.123 319.937 190.635 321.051 190.877 cv
319.807 189.603 318.29 187.75 317.053 186.174 cv
317.192 186.176 317.328 186.179 317.47 186.179 cv
318.293 186.179 319.069 186.155 319.823 186.121 cv
324.312 187.439 334.333 192.575 335.455 191.752 cv
336.669 190.861 332.498 185.968 334.924 179.668 cv
336.082 177.718 336.472 175.588 336.653 173.661 cv
341.033 174.09 344.281 178.58 345.418 178.58 cv
346.685 178.58 344.696 174.275 344.827 171.234 cv
344.906 169.413 346.769 166.529 347.867 164.057 cv
348.59 162.427 340.391 168.177 336.138 167.714 cv
334.95 164.23 332.258 159.946 328.546 157.079 cv
323.912 146.198 339.454 141.863 349.133 135.771 cv
cp
f
250.729 379.339 mo
252.072 378.771 222.218 381.867 205.335 409.467 cv
204.121 409.771 201.897 411.489 202.504 412.399 cv
203.11 413.309 210.895 423.116 215.445 424.026 cv
218.073 428.171 224.038 434.945 227.678 434.844 cv
224.746 431.204 222.421 426.452 222.421 426.452 cv
225.049 427.767 228.891 428.879 231.014 428.676 cv
228.285 427.564 226.161 425.745 226.161 425.745 cv
226.161 425.745 229.194 426.25 231.419 427.059 cv
233.643 427.868 252.953 431.305 257.604 424.835 cv
253.358 426.048 251.538 424.936 251.538 424.936 cv
251.538 424.936 254.672 421.397 246.685 414.219 cv
250.729 415.23 253.661 420.588 255.784 419.173 cv
257.907 417.758 261.648 407.546 255.178 404.412 cv
252.347 405.625 248.202 408.658 246.281 408.456 cv
248.303 405.524 250.83 397.638 246.988 392.28 cv
243.146 386.922 238.294 384.596 250.729 379.339 cv
cp
f
201.666 250.251 mo
205.545 246.149 208.164 235.07 233.234 238.385 cv
239.104 237.28 246.538 238.886 252.295 241.355 cv
254.275 242.204 250.36 248.046 248.251 248.525 cv
251.222 248.238 253.139 246.896 255.632 246.129 cv
258.124 245.362 261.492 243.297 262.054 245.65 cv
262.616 248.002 260.041 257.344 257.74 256.864 cv
255.44 256.385 250.551 253.605 247.484 253.318 cv
244.417 253.03 243.554 252.934 243.554 252.934 cv
243.554 252.934 248.014 253.786 248.773 255.927 cv
243.317 257.585 239.752 256.483 239.173 256.411 cv
230.197 258.194 219.918 258.433 216.59 257.93 cv
211.51 257.163 199.065 253.001 201.666 250.251 cv
cp
f
300.078 313.885 mo
291.928 316.264 280.271 325.509 283.932 327.089 cv
287.593 328.669 298.055 332.479 303.553 333.806 cv
309.15 340.242 314.386 343.278 315.683 343.399 cv
316.979 343.52 314.374 339.537 316.348 339.566 cv
318.322 339.595 318.171 334.1 313.732 333.319 cv
317.743 332.384 319.291 332.176 319.291 332.176 cv
319.291 332.176 319.622 337.548 330.14 335.933 cv
340.659 334.317 340.737 334.897 340.737 334.897 cv
340.737 334.897 338.185 327.657 331.251 328.1 cv
335.481 327.332 337.053 325.84 339.055 327.539 cv
341.058 329.239 347.344 335.681 350.83 333.043 cv
349.335 329.994 347.76 324.888 351.306 319.78 cv
354.853 314.672 351.249 316.433 346.807 317.821 cv
342.364 319.208 339.525 322.256 337.415 321.949 cv
335.305 321.643 333.464 320.408 333.464 320.408 cv
333.464 320.408 340.056 319.623 338.434 313.439 cv
334.854 313.922 325.155 311.389 319.127 309.05 cv
313.098 306.711 300.19 306.679 300.078 313.885 cv
cp
f
381.447 159.329 mo
369.268 160.616 364.998 168.813 363.784 173.695 cv
370.397 178.621 381.528 181.604 381.528 181.604 cv
381.528 181.604 381.996 187.714 384.457 188.497 cv
386.671 192.272 392.52 194.679 395.102 196.515 cv
398.211 193.667 394.747 189.325 390.693 187.066 cv
394.9 188.596 398.094 190.598 398.094 190.598 cv
398.094 190.598 400.848 183.642 392.475 180.934 cv
395.71 180.205 397.113 180.043 397.113 180.043 cv
397.113 180.043 398.81 184.47 401.684 184.731 cv
405.324 187.512 407.056 188.142 409.108 187.431 cv
415.119 188.16 420.468 186.238 418.808 184.178 cv
417.148 182.117 411.601 177.186 408.609 176.939 cv
412.82 176.453 413.715 172.912 415.897 175.387 cv
418.079 177.861 430.983 187.989 434.227 183.229 cv
437.471 178.468 432.747 174.509 434.704 169.898 cv
436.661 165.286 434.677 157.336 432.639 158.164 cv
430.6 158.992 419.464 168.549 416.401 168.453 cv
414.896 168.406 412.946 166.244 412.946 166.244 cv
416.788 164.616 422.493 157.556 422.493 157.556 cv
423.15 156.058 416.115 155.193 409.162 153.998 cv
402.083 152.781 387.625 144.037 381.447 159.329 cv
cp
f
209.668 86.9412 mo
203.865 85.4178 195.813 86.4334 197.554 97.4599 cv
197.046 98.6206 191.75 101.667 194.362 102.828 cv
193.781 104.351 193.636 105.44 195.377 106.455 cv
197.118 107.471 205.171 112.766 213.005 111.896 cv
215.689 116.248 216.705 116.901 230.488 120.456 cv
224.757 117.046 223.959 115.668 223.814 113.274 cv
223.669 110.88 224.249 108.631 224.249 108.631 cv
224.249 108.631 228.239 107.979 231.721 106.6 cv
232.882 108.994 239.556 115.958 251.815 117.264 cv
246.738 115.958 245.069 112.839 244.344 109.357 cv
243.618 105.875 241.66 104.787 237.96 103.408 cv
241.805 101.232 242.53 99.6362 244.126 99.6362 cv
245.722 99.6362 251.961 107.036 255.443 106.6 cv
256.531 105.149 256.676 100.869 255.733 99.2735 cv
254.79 97.6775 255.225 97.8952 255.515 95.2111 cv
255.805 92.527 256.241 89.4802 254.572 87.5216 cv
251.38 88.9724 246.665 95.5013 244.053 95.5013 cv
241.442 95.5013 240.136 94.5582 239.193 93.0348 cv
243.546 90.5684 241.587 84.5473 249.494 82.5162 cv
244.634 82.0809 238.468 84.2572 234.188 81.9358 cv
229.908 79.6144 208.508 76.7127 209.668 86.9412 cv
cp
f
377.308 406.053 mo
380.567 398.854 384.182 393.069 390.75 389.48 cv
394.722 384.744 403.047 376.801 411.601 380.849 cv
420.155 384.897 427.029 390.549 430.16 391.465 cv
426.036 395.132 422.676 400.554 419.239 400.096 cv
420.308 403.533 420.842 403.839 422.446 403.686 cv
424.05 403.533 431.963 398.263 435.507 401.547 cv
434.361 407.199 436.041 408.345 434.208 410.789 cv
432.375 413.233 434.819 414.608 433.979 415.601 cv
430.466 415.524 422.905 410.101 420.69 410.101 cv
421.453 412.469 427.029 416.135 427.793 418.656 cv
424.814 418.579 423.21 420.107 412.517 425.759 cv
401.825 431.411 394.798 416.899 390.75 416.212 cv
393.5 418.808 402.512 431.487 409.386 433.396 cv
402.665 432.403 394.122 423.184 391.983 419.976 cv
392.518 422.955 399.228 428.89 399.839 434.389 cv
398.54 431.334 396.062 426.418 392.701 424.05 cv
389.341 421.682 384.869 417.51 386.626 414.608 cv
382.196 412.164 376.265 408.357 377.308 406.053 cv
cp
f
405.075 25.1669 mo
396.192 24.8849 385.618 26.1539 378.215 30.7363 cv
377.651 31.2298 378.779 33.0627 378.779 33.0627 cv
378.779 33.0627 377.581 31.0183 376.946 31.7937 cv
376.312 32.5692 374.056 39.5486 391.68 41.6635 cv
395.135 45.0474 402.608 46.4574 404.229 40.465 cv
405.569 40.0421 405.569 40.0421 405.569 40.0421 cv
405.569 40.0421 410.01 50.2643 419.175 45.8934 cv
421.995 44.2719 421.431 38.5616 417.694 37.0106 cv
419.034 36.5876 420.867 36.5876 421.572 37.6451 cv
422.277 38.7026 421.431 44.4834 428.128 44.0605 cv
434.825 43.6375 438.491 29.1148 432.428 29.0443 cv
426.366 28.9738 424.251 31.8642 422.559 31.5823 cv
425.026 29.2558 429.538 28.6918 428.622 26.9294 cv
427.705 25.1669 416.425 15.5791 405.075 25.1669 cv
cp
f
419.449 243.738 mo
414.585 243.577 414.747 241.511 413.757 240.686 cv
415.489 237.468 411.529 235.241 410.952 233.096 cv
410.374 230.951 412.437 227.568 409.302 227.321 cv
406.167 227.073 400.887 229.878 396.514 232.518 cv
389.584 233.013 381.912 235.488 377.952 238.788 cv
373.909 240.438 369.537 242.418 369.289 243.821 cv
369.042 245.223 379.354 257.811 394.452 259.107 cv
397.009 264.693 399.979 269.973 401.547 268.323 cv
403.114 266.673 402.537 260.898 402.949 260.238 cv
404.022 259.107 403.279 257.021 403.279 257.021 cv
403.279 257.021 404.847 256.443 404.929 256.361 cv
405.424 258.753 407.652 263.621 410.869 261.558 cv
414.087 259.496 417.304 253.226 415.737 252.236 cv
418.129 252.566 430.504 262.548 433.474 261.558 cv
434.382 258.836 431.494 252.566 429.432 249.431 cv
431.577 247.121 436.609 240.356 435.289 237.798 cv
431.577 239.036 421.924 243.821 419.449 243.738 cv
cp
f
277.66 250.934 mo
283.135 243.136 300.557 233.845 316.485 235.504 cv
324.449 229.697 328.597 228.203 328.597 228.203 cv
328.597 228.203 335.4 234.84 334.238 240.813 cv
331.252 242.307 326.108 240.316 326.108 240.316 cv
326.108 240.316 333.243 244.464 338.054 243.966 cv
342.866 243.468 353.983 229.531 355.974 234.508 cv
356.14 239.984 353.817 245.957 354.978 247.284 cv
356.14 248.612 361.781 254.916 356.471 256.244 cv
351.162 257.571 341.871 251.1 338.054 252.76 cv
334.238 254.419 332.911 255.58 332.911 255.58 cv
332.911 255.58 337.888 254.585 339.714 254.419 cv
341.539 254.253 338.054 273.499 320.633 260.06 cv
318.808 260.226 316.485 260.392 316.485 260.392 cv
316.485 260.392 322.624 263.71 320.965 265.701 cv
319.306 267.692 315.655 270.513 309.516 261.387 cv
296.243 262.051 274.062 256.059 277.66 250.934 cv
cp
f
181.837 246.233 mo
181.58 244.435 181.58 243.921 186.334 235.569 cv
185.184 230.873 168.617 245.891 149.972 246.747 cv
144.798 246.985 142.777 247.261 138.408 244.178 cv
143.419 244.82 142.648 239.552 141.749 235.184 cv
140.85 230.815 139.668 224.757 138.023 221.949 cv
136.377 219.142 147.017 218.48 153.056 215.654 cv
127.744 217.067 127.101 224.005 120.549 234.027 cv
111.426 233.77 104.007 240.433 97.5355 244.671 cv
95.5745 245.955 96.0078 248.546 107.957 258.054 cv
112.154 261.394 116.185 262.583 119.843 262.524 cv
118.68 266.388 118.989 272.307 129.029 280.282 cv
130.181 279.418 127.247 274.54 126.491 270.359 cv
129.027 272.233 133.407 273.648 140.805 273.974 cv
142.375 271.832 132.275 267.896 133.31 262.583 cv
133.796 260.085 132.077 259.347 129.973 259.195 cv
133.077 257.195 135.359 254.784 136.481 253.429 cv
136.353 277.712 161.664 274.757 157.681 272.059 cv
158.966 272.316 167.703 272.316 170.144 270.389 cv
170.53 269.361 165.519 268.718 163.078 265.506 cv
164.363 265.249 175.155 261.523 175.541 261.523 cv
175.926 261.523 176.826 259.724 173.228 257.026 cv
180.423 253.3 184.792 247.518 181.837 246.233 cv
cp
f
93.3852 103.511 mo
91.8089 95.3142 107.793 87.836 111.329 87.344 cv
118.391 76.4511 128.63 77.3819 129.489 85.8311 cv
134.501 86.5471 138.368 88.4804 138.368 88.4804 cv
138.368 88.4804 152.28 81.1865 151.758 93.7075 cv
155.139 94.3578 158.778 93.9382 162.069 91.631 cv
168.853 86.8742 170.898 92.5514 171.664 97.1444 cv
172.308 101.011 170.337 105.337 165.12 103.772 cv
159.903 102.207 154.908 100.295 151.328 100.653 cv
154.459 102.74 154.121 113.9 137.991 108.989 cv
134.501 110.534 128.236 112.212 128.236 112.212 cv
128.236 112.212 129.485 119.991 121.398 120.774 cv
113.312 121.556 109.992 112.496 109.992 112.496 cv
109.992 112.496 94.6895 110.293 93.3852 103.511 cv
cp
f
20.3507 99.7381 mo
23.5507 99.5498 29.0096 98.6087 32.0214 90.7027 cv
35.5906 81.3335 60.0685 76.7733 66.845 82.2321 cv
67.4097 87.3145 62.7038 97.4792 65.3391 96.3498 cv
67.9744 95.2204 71.3627 90.5145 71.5509 89.9498 cv
73.0568 92.2086 75.7134 102.013 72.109 108.201 cv
67.4031 106.884 65.3391 100.679 63.8333 101.056 cv
64.016 102.149 69.7967 110.242 62.7918 112.622 cv
59.4102 113.771 51.7861 112.726 50.4685 110.844 cv
48.0214 112.162 45.7218 111.806 45.7218 111.806 cv
47.8981 113.642 li
49.0275 113.83 55.5509 117.997 59.3156 118.185 cv
54.1548 120.511 47.626 123.095 43.4095 112.622 cv
31.7801 110.922 33.4829 103.879 28.0684 102.373 cv
22.6539 100.867 18.8474 99.8265 20.3507 99.7381 cv
cp
f
22.1457 171.122 mo
30.2063 162.739 38.3251 156.448 55.9188 160.113 cv
71.6065 157.767 75.1253 157.034 73.0727 168.47 cv
77.1779 171.256 81.7229 161.726 84.0687 161.432 cv
86.4146 161.139 89.3468 181.958 82.6026 182.985 cv
75.8583 184.011 76.8846 174.628 74.6854 176.534 cv
72.4862 178.44 79.5237 182.691 72.3396 186.503 cv
65.1555 190.315 60.7571 186.797 58.8511 185.624 cv
39.9379 192.661 18.4803 174.934 22.1457 171.122 cv
cp
f
17.1969 250.289 mo
20.1134 242.923 26.0174 216.023 74.8619 230.839 cv
65.5019 229.727 55.5001 228.32 56.8361 230.488 cv
58.172 232.656 66.9267 234.578 59.2059 244.789 cv
61.8683 244.069 69.3885 237.341 73.8395 238.142 cv
71.5544 245.487 71.5837 255.915 73.0461 257.131 cv
64.8758 253.767 62.4987 248.789 59.7045 250.303 cv
63.1447 253.982 63.1018 257.46 62.1067 260.811 cv
61.1115 264.163 71.5869 265.554 76.7372 268.386 cv
68.9348 266.59 64.005 265.647 57.686 265.698 cv
51.3669 265.749 41.4027 260.707 35.8729 260.732 cv
43.7485 264.737 58.101 268.687 63.4991 269.456 cv
53.8757 269.933 25.6756 262.966 17.1969 250.289 cv
cp
f
17.2529 330.32 mo
22.003 320.819 26.3612 311.207 43.0846 311.655 cv
59.8079 312.103 64.5861 317.479 67.3484 318.001 cv
63.5408 318.151 59.9573 318.524 59.9573 318.524 cv
59.9573 318.524 68.3395 322.303 72.5745 320.39 cv
77.2033 318.3 83.0266 313.522 90.791 320.913 cv
86.8341 319.27 79.667 319.27 80.4882 324.795 cv
81.3094 330.32 90.791 328.155 98.3315 327.035 cv
92.9561 328.677 85.4034 332.377 79.2937 330.544 cv
74.0676 328.976 71.4546 326.139 69.5135 328.453 cv
67.5724 330.768 53.3127 342.564 41.6661 338.607 cv
30.2434 339.577 17.4445 332.493 17.9995 331.888 cv
18.8207 330.992 16.8796 331.066 17.2529 330.32 cv
cp
f
35.3408 397.915 mo
31.0935 397.899 26.6363 399.007 21.5458 403.341 cv
16.4553 407.675 15.0334 412.934 19.8173 415.326 cv
21.5462 416.19 33.1891 417.952 41.8003 417.604 cv
44.6196 421.754 44.4201 423.754 50.6825 423.314 cv
55.2899 422.451 53.6198 419.085 52.3932 418.743 cv
51.1666 418.401 43.721 416.918 44.9896 416.806 cv
46.2581 416.695 71.217 411.714 78.2489 412.364 cv
83.3745 417.832 91.5788 416.582 92.8283 415.44 cv
90.892 410.656 85.8803 411.567 84.8198 409.097 cv
92.3727 406.555 97.2739 399.588 97.2149 397.753 cv
85.8803 397.899 80.4685 404.146 78.6892 404.202 cv
73.3083 404.369 69.7247 402.682 69.7247 402.682 cv
72.2618 402.459 66.9484 393.314 64.8085 394.254 cv
60.1385 396.304 57.6538 400.044 56.6121 400.177 cv
55.5703 400.309 53.1276 399.511 53.1276 399.511 cv
55.9241 396.076 54.0094 392.062 54.0094 392.062 cv
46.0147 387.078 35.908 397.917 35.3408 397.915 cv
cp
f
432.552 318.076 mo
429.676 317.806 426 323.315 422.993 323.196 cv
422.373 323.172 421.275 322.474 419.772 321.416 cv
418.658 314.254 415.763 306.054 409.117 304.617 cv
404.028 303.517 397.015 305.903 393.911 309.6 cv
392.913 309.456 390.846 309.495 387.652 309.965 cv
380.644 310.997 379.223 317.004 377.378 320.779 cv
376.406 322.768 375.936 323.573 374.87 324.135 cv
373.835 324.68 375.547 324.939 375.547 325.236 cv
375.547 325.57 374.672 325.688 374.728 325.999 cv
374.866 326.755 375.463 326.733 375.971 327.863 cv
377.82 331.972 382.58 340.343 389.62 341.588 cv
390.337 341.714 391.043 341.799 391.745 341.866 cv
392.561 342.76 393.407 343.456 393.407 343.456 cv
393.407 343.456 401.093 347.399 405.939 346.597 cv
404.969 345.253 403.812 344.351 402.563 343.7 cv
403.758 343.729 404.979 343.682 406.119 343.507 cv
408.816 344.695 412.038 345.642 415.724 345.894 cv
419.836 346.176 420.317 338.099 420.372 331.3 cv
421.283 330.754 421.983 330.431 422.446 330.449 cv
425.453 330.568 430.439 336.614 433.002 335.453 cv
436.146 334.03 436.687 318.463 432.552 318.076 cv
cp
f
265.74 325.225 mo
265.602 323.703 267.954 317.615 266.847 315.678 cv
261.451 315.954 254.256 323.011 251.765 323.011 cv
249.275 323.011 243.325 322.596 243.325 322.596 cv
243.325 322.596 248.029 321.904 246.923 320.52 cv
245.816 319.137 238.759 310.558 236.268 311.803 cv
233.778 313.049 227.551 317.061 227.551 317.061 cv
227.551 317.061 227.966 311.665 224.092 309.728 cv
220.218 307.791 208.595 301.288 205.828 305.439 cv
203.061 309.59 202.092 314.432 202.092 314.432 cv
202.092 314.432 197.388 315.124 192.13 318.722 cv
182.306 323.426 180.23 326.885 180.23 327.992 cv
180.23 329.099 187.979 338.508 205.275 338.508 cv
211.086 343.904 216.759 348.427 219.526 346.533 cv
222.293 344.639 218.973 341.414 218.973 341.829 cv
220.218 341.137 219.941 338.231 219.941 338.231 cv
219.941 338.231 230.734 340.583 233.224 337.539 cv
237.099 340.307 244.57 343.074 245.816 341.275 cv
247.061 339.477 246.507 332.697 241.665 333.25 cv
243.463 330.759 250.382 330.483 252.457 330.483 cv
254.533 330.483 267.219 335.464 269.294 333.665 cv
271.37 331.866 265.991 327.981 265.74 325.225 cv
cp
f
184.402 390.54 mo
176.927 390.54 168.698 403.541 165.751 403.541 cv
162.804 403.541 167.96 402.005 156.088 393.504 cv
151.165 389.978 145.355 386.853 153.891 382.05 cv
148.186 382.639 140.412 385.641 138.112 390.672 cv
131.132 391.265 112.072 399.403 112.037 410.229 cv
111.905 411.546 113.09 411.48 113.09 411.48 cv
113.09 411.48 112.419 412.265 113.713 413.559 cv
115.006 414.852 123.622 419.973 129.947 421.554 cv
135.462 430.172 139.495 426.69 139.495 426.69 cv
136.543 421.797 li
139.343 422.299 144.035 422.906 144.035 422.906 cv
144.035 422.906 146.672 430.18 155.904 432.075 cv
151.94 428.798 151.51 424.819 152.741 423.738 cv
162.804 414.904 164.253 411.085 165.248 409.219 cv
165.991 407.823 177.868 418.064 184.336 418.064 cv
181.05 414.778 177.951 409.174 173.998 405.356 cv
176.305 403.05 179.679 396.474 184.402 390.54 cv
cp
f
346.373 408.115 mo
352.607 408.115 352.895 420.776 360.952 422.886 cv
354.152 406.661 354.152 406.661 361.335 392.961 cv
352.224 397.086 349.927 403.991 345.994 403.991 cv
345.427 403.991 344.838 404.009 344.313 403.763 cv
344.175 403.698 343.553 403.03 343.737 402.705 cv
342.943 402.608 342.489 403.096 341.867 403.074 cv
341.827 402.785 341.952 402.516 342.071 402.279 cv
341.436 401.998 340.556 402.356 339.895 402.163 cv
339.933 401.823 340.026 401.484 340.247 401.199 cv
340.252 401.2 340.217 401.153 340.216 401.158 cv
339.424 401.135 338.669 401.305 337.902 401.336 cv
337.894 401.328 337.886 401.32 337.878 401.312 cv
337.877 400.966 338.022 400.658 338.222 400.401 cv
337.467 400.3 336.694 400.535 335.929 400.492 cv
335.848 400.163 335.973 399.852 336.11 399.56 cv
335.462 399.505 334.915 399.889 334.309 399.929 cv
334.276 399.675 334.339 399.402 334.443 399.185 cv
334.005 399.163 333.649 399.453 333.242 399.463 cv
332.618 399.477 330.97 398.946 330.548 398.524 cv
329.109 397.086 333.425 391.043 335.535 389.221 cv
331.795 388.55 321.724 397.757 321.724 397.757 cv
318.943 397.373 li
318.943 397.373 315.49 393.249 312.517 392.578 cv
309.544 391.906 308.584 389.796 308.584 389.796 cv
308.584 389.796 306.616 393.397 305.273 395.219 cv
303.062 394.63 291.239 396.431 283.687 402.01 cv
282.285 403.045 280.233 403.513 280.69 403.765 cv
280.69 403.765 281.461 405.326 286.204 407.929 cv
283.347 407.861 279.128 405.275 279.128 405.275 cv
279.128 405.275 285.796 418.543 312.786 419.176 cv
315.116 422.855 318.549 424.204 321.002 424.939 cv
320.879 422.977 319.285 419.176 319.285 419.176 cv
314.503 419.053 li
314.503 419.053 322.841 417.704 325.539 416.233 cv
328.605 418.808 337.434 423.345 337.434 423.345 cv
330.935 413.903 li
330.935 413.903 333.19 412.953 333.263 412.923 cv
333.429 412.853 334.136 413.239 334.308 413.303 cv
334.784 413.478 335.275 413.717 335.783 413.5 cv
335.581 413.212 335.502 412.496 335.844 412.335 cv
336.117 412.206 337.172 412.584 337.518 412.626 cv
337.393 411.187 338.902 412.102 339.701 412.087 cv
339.331 410.741 340.988 411.049 341.69 411.036 cv
341.274 409.913 342.826 410.22 343.387 410.185 cv
343.324 410 343.319 409.804 343.322 409.606 cv
343.622 409.653 343.928 409.703 344.236 409.693 cv
344.225 409.693 344.667 408.719 344.797 408.64 cv
345.16 408.42 345.783 408.115 346.373 408.115 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.0
%%For: (Anton) ()
%%Title: (1606.m00.i125.n028.S.c12.319367528 Fish vector silhouettes black on white.eps)
%%CreationDate: 6/25/2016 10:32 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6CKoQ'ej')FhUf0M6[GV`Um>i?2UIaT#c35AJ^SUR8-5T?K]^XLmMGoLriG!\EoM%[B;UlG44d.L.'fWpXn+imGAjb>D,b80
%_o:c1ZPb-SomA->J'NQDF77uWg/bV0AWK0agc_Vp3h*6`\_:pS2=&LfHT&5&Zdd'tQO`8L;W`D8?>oh*=fdt4a7N&Se__n.lIB@M
%F].L89[;TdGE3hpe#'$V!.<r&?uP^kR^T8f%P<:Pk'=F:(6_[+@JFd+j/5/C:P!FJ"eMUK*rYds"bDio55mS;r:qLjafcVNG.W'(
%C6^ifAqMG!bp`F,MS@:KWX#A<]d)jboR#!+cGL'FR*KN<U8?+1)-V^QruCp.r2%8:6i::liW"A9o:PMTBAAFno5&:[0Sbr(#,a^n
%C\rWC2Z[*ZG`gY7Sa+=2^!s%P0l$+=r(L.?-3&c_e+mt'XGZp\A27:pl^T[Ij7/`BrighJ-rBk>X8XiCH!W(&W\&SGq,V.?p-1T8
%M`/"hX';d9hDAsfg,9fsP(QkT<iU9DZi>9T?K,Hj5fl6-O.B27YhC6_D:Z<YLY5Ab`8A8nSue3+<e6CU:9nkCD<s*'H(eBeMZCN4
%VrWRZ'03b$o)4Nq-?4_/TGR^Ua!1gKSP;GuNE5GNesO^:FKe4bMnLXC>,@:mJ^/r>K42iTM18D#cRtI_mrYRhGjS,l/ZgDA^r`]s
%A*W/FAZ9s,'56FP`@<HkBVXEH[,:TWi9t?8m\tno)tmSql%*"?"98*[YN3<7DmS;s03;?%mceKHT_[LF9][eLrG#rR>4+4OFJb>I
%`r7pnj'cQbPH4@(f/TC-O8^"Cs*R>jL`0Qn7b?8e4sOEZJc.q.+8#'3:[Pmg#m)$W2d`^e4+2@uib6YAeVnlKcgm_#qZ+C[4AYTE
%CoKY7-eHbO*ipl2qJ5[;!:_TOo\6nJRJm@r7`JVLr2A29VjK^JQmjmBRCB$DBpuGGek;!#/&P`lc)'3mLM<@_f,d]HY_!uBLOh\Z
%&0F[9Zu4@:CUG7kRM'%"WauiDSC3hq6enRE_R1Bs?_s3ke2\_`;JfCeIt*)M+:n%_i3sg&n*P["Q"FU^5>V!Boih6Gf;7h;P'bMJ
%nG;otZm?ck[q6M84u0*J&p0jYC&EpN03"fEE]g@f*WXWpD8&Aqkq+IJrcY<D`^W<R]%(X>ATjNeqVU1HmIiO?mtO9HGS_2IJUtPa
%hmS&2Jjb2Akl1hi^!?ZAlBUJDJ[QDoAUuu%AG(-=9;QsJG1\:8*nAF5/-%`IDe#C)-7#O&f,jN/(%^H9J\,I+W>J[(.HN+F.`Ur\
%kMj5YJJ]"g+H@>"(\9/h-!'^E0ltdK$XcEdVS#b6[B(a^>cEkbEeu3WZHr4dV,$h7ZW>h!Q!1T\21c'(I8F^@lCHVreiHf.bLGIY
%Gd24s>9_M5944F3_SGPiO+E4GJc!X[pIMtkWfPj"[>Lf$jNHrH's[m&0GGT&5%eKlYBT;JYK.(/c\5O?8q!]3o9ulF1/i[oe/S$k
%QM.[cg[B<cU_M$La*apf3npQ[<3')(eHYcpRE)@f:B*ubkkp+n7UJn>a1:puo6?`/D&a%/qGF8:D6K^LmI7&q8\[aZ7(UbQif5f>
%%F-''9'7T+1q);GJ4TjcT..SNF*Jhg=8,7Q33eDRC@n#ZFZj9C8d`qlBiqSsffi(hOKOB'JGB1l##YF[d!M">n7N)9IeL#9\oj#O
%MsPOiqd$Leb15g%6Ctc31O=Za%A<#QBiWpDH5`@sG8qAXNTPD^7]OE"+LSa%gja%ZDkQj/JCE+;e``T@PWP]`WIRTa*Z@\n3WA\Z
%m?cPW@]T@=99bct_49b^P1a(EJ[u2?lhPpNk;oK&=SgS20Z#B8f!l,O#@oZ;%1CdrS)%,U\ft0b)Mh8l1d$"8?!m_ik%V5',)[rT
%./g;9VO+.Aa_A*+L0Y.,q+[ntII$_54>'SD134,PD?ReD=E_Tjm(A0d2mM_h`3MI<Pt2^o^M;?R'AMqA?m`><DZhZrWuOL]/qn(Z
%@bOOM]8:5\1$p<bh-\&6hoR"s,ot?:WFSMnmr0k91PnG)S6VlaCdd$_)%k#'8&P]<EJB@UI3q7W^LW4\UE8<mShtqmd,55]HFb]-
%&(/de;01I5.%brL)>Z9^TBZ(idWD[JO[#^'ppf@gi%3FY./gepTnBdGVpn=QX@UZGJ^g]kek9_oKV_;;L,@6k5kV`!$``o7^",^T
%<4Ps],JcMH;#ROaUG=2#l;bE0'J8`1/3'ernO]O7B7@gX^E2tNq[_!VO9YMQj`:*kM\;+.O<lpu:YW'P%r.*Ie`$TFGZl\A$E:6a
%d<B7fJ/$)7?Th(oOP,(M2.9+:g.<d4)F8.'8E2_2'WOB4>ksZ-FdDAX>iS%U5<ULP!7QG4IOT,pUXqCE358pL%F]g3;X1^F[8LN)
%Ei;Hs#Q1m&CuelO.1pCGao6L1r.Y8L3Hk(4F>)ZQJ!6LaO!A_q\3LCViULIkWT7K\e'P2)'JQ=k?H5Fo?"m\ce%jlO;8Z01_e!cs
%^nA\:K,f0)phRNdjCMi#<U1Wq<'+eNQEc^;.<r]/=WoecJV[YqgKu,@@@l_0[<5TjAe$VK/$#&UO=)dDIkuhLUAea;6_;5X0A;R4
%`fQUu&Ok9r>Y7>T`/TNWd`m^i,ALIUiMN*_N@/`+hZ2U\DENap&(bch`/Q-aj&(Vb:#a/[+T<;k2u^p#)de(;F]8QDLMRiPgnm'$
%ZO[Jh9M3.^\uc'4c*p:99VWa>Fs!09RR0HF*?91UeYQl1CnF08k&BaF&Va$t=kZ4^kWRq<Dq$(r`KD/cPYsm@:WoS3'*gJ=6RK*U
%m]]]n2WfhhWcM]QeIJ'i5AJGh[56F7<p#jQ;WH2]_o-[UELfg/B>5_$rL;b,9;V&Or+?]CftS!M`.'[+b*!*1`8!ubX.=?2h,i.m
%3@rr@.DVq6l*$?.^dR'']4hU0[V+4?h1IWW3u>bg`gRVqj,*IYciif&+X,5/"lI5n7u!q[U^(l7cVp"#^B@sEOl7b=Q^P*;_;gmI
%pr:_CG=1.U0c^\1IUprqlA]hs=>u-t?E=rtr@\i)bJ`p+EP22jTf6u(9H5]!a32Ek13's#*%qDSQf7K)S!3"k1(L*sCHRTa#O/+N
%jo1E347`+@NOuH),TI</M]kbHXME?']W`Rh%&88[72d"4rPFFKQYqcYKb`hcd7.ImhR'oLDsV<Uoic"7<4auA2%binb`kV'3)4@4
%)@bYM'5hmf75J`?"_;qn4->N?5,64O:,hJSVdDF8aUM"/)k;Wul0rWB$XQb_1F=c"c)M`SMHBbuoo6X0bK.A"\4k()oVL`m/R,_Q
%bL?#$QYQ?i`i\/SeTZ%^eeQeLNA/B/m.\>nGTl5e?[?^5]PWjJ0<X8t_c/M6rn<8E>bI6LE`[uD]$nHVL6ktjN]^I'3jWQB*42ae
%:d_9e8X\0a2QTQ%]/e)Nj!o:CRr'1qS'?hd`m4#(9BG3EN&3Cf9BB@?kH'k?V;M2E=7md9L4sh#1P!N#N`*_M/n@oaif,6!r=s35
%#2t6Bpbh?RoZ$!bh.Z2KI8m4's&cj8]PY=Q#6$SS<Icg4"hlq'^3=UohrIDE+b;AYddJ9A8Y[UAPad83:5Ym&?7ba[^P-9elI3gR
%9APEiG#E!8@t!+W03fk]QFH6TeFE'.a)?cK2\OYZ,KEb29$p`h72)6U+(**bK)@AF4fKQrGjn4*L/+8p(ELap.$C'!OH2kngn]OL
%[%u\UbA"Z[<H8c33"_17$M(q9_l*s`8HnqR$-5[Aq*[-t!80>l*ot)%7%0\QLO$,=<_5Ji-hD\PiqT%aDdC=a@`1R5<:6"9YF;jU
%L9Wjb/RJ((*sW&GL^X6RDJR!kY;XhACLCs6cl10r:9@I//:KQTOFr!D[<ehh>n$?HRRNFW*,'Fi2MgdMUk1)LH!!>nS.niZrDL72
%CfS5o$!l#E=.\Y@A5RA!V2[A\5:P!!.5#6M$QcH+NrAF@:VE([U#h>LLb.sR%X``dL"6Soh7b).BrinuHF(#.'s3HRS%..<I,#F<
%n+To%%?lOdrf2s(9t2GnRmNkhq-,V'T9j7?i,&<aoru?0r\;,tiia?J(rT$q6!YFT$G(3`FpKAoj'X"b4D$;(8H^N0VSZg_e`gGY
%\rl._8T7R,'94"HNP.Z,P9^]YmG1(9<NNT_kl2L-'CM+Ye"#i.GUIV\Ko;Q(hG*<b*9]OrDGogZb$/At7W&j%jarGT\`me91-r6T
%URA^hb\V9taWYK[T[&"a<GJlOd_(->"EFF-$P#Y_lg\b:g;p=c2q%4>=>sJZHK+e2k]AfG/RP\W/=aJ4YEK[DhihOFRoXL'?Co+(
%[S_U(Vi>=r?%_n*Ueh7CYH0b]b*m<\=#Vi)\,6cOZ>MWer$MI9,ggh!kaMW%-V[.tmjIsl/8<r44&9)2PNIo?%%frCA\.gX8Q['S
%A3FT`:XVMFh1c/+O?s43dtlrEn=V2[s![iYN7/6YY>2'^;Lh?b@=cq.T%6PKP-R`G9!)%(PdCY_`9VOd(0's1UKU90Kk%Ym0<[=`
%R!smp_ZItVJU*M;!HRE^/25KXf-K4lZbKrLY"-4Brkm1n)ek,.>je2*l_QF5Z@U<=!isnN<"E`'<7fh:CT3U\KiAnWkaPK?pcWMV
%;PSDul83s^,A,^=[;O\%NN';M;7F,dBCo_^Jd`=El1LF\Y#C=hIcFcXmaJuMj;KUgrq:`P2r'Z.`g'VWj.GN$V5P?Dkm$@d:k1Gt
%K)=Y/bR)PmAsuA$=Pn4h9<eX6R[_[ZjYR3?$65`sj%-],pNs8kf`cg(LI`u8(:6]!=uT.q+RV3?Ab`-./mG;\iB\<%"b45=3^%6/
%RtiHP0GDb+O)mK@iI!)_@)D^dS8Z:?7\B9$cae6_Z5cln]r@p]EELkc%\,auPuM\-ZMfL]9NJ%l-I&A36bIJ.6n=*n?VBfqO;+\.
%Ltj-*'?`T=,4P<SA9NrY>%5&V9Tr89rj'16j"Q\_VoD#>8G@SRE@\O9q^VE2E9gIA(e4JPW>kF)e,DMt2ilP1pl_Vu>HPsDXk&,C
%T:SdQP3[;SB=^#e9>=m92gM7m8Fpq"_;oai"1MMr:'u_3ic[,GNiBhh?OALd2af?!3\^P9)u+XA(n8e(jK6srUr^<kLIY[Fgph\W
%L+X["(F'dc$RI,Qj@m?CGp2?ha/*d#+m2RF)<X^%X&%Tnq0uI*Nh[3a/"YUeGqIFBS]KkdSA0%YPC0$Q1gT/(AR\=cLe=pD.EX\!
%W>\-*745&Q,:VLtW>^t"NSgJG:YlJ&PKgGko.%BB0agJ<A:C<6C4$M&@]PK@XeslFmDc!L%(g[Mq'gh3nJmdOS,rZZKpr$#S,jjn
%JiC=:,XnQp`1o&/>A)sC(eI^e]E'(51b_Tc)C'%hNZ65=4;nlo`i,HP`1o'WBT.j>_mrnkNE"hpM+?UGgdRq(I?D$p6HNltmJAl%
%OfP(*i1IaEDW9t!.WXB^:IjTZ/(0W"(#c'nh2L4K6NcQH(^NKTqnW_j03/E1HOO8>jnpXt`>YT`4aF6J3Dhr`U5<tCDr_p%P;b!c
%m(J7h2mN+scJD2;mjIhc`82F>ep.@)jufpD`lI(3OXWJK(1.EI-3iAGi0tR2K4%@]^59]#J+L6sFb:+:m#B+hp>r/s=F']/GrC!e
%Intria2Q'AVW&=LgWEI*'`%H4p9'sUP-t5"hm>20H]E!*!M0M;ro#eYr@Uh:(Z0Ts@:R3pWsSA97\]ei@U<dH!Ya_hn*$H(Tn_V4
%n>uR&[bLT(pHNJM%[4]KpsglR0T;;)ZUUP;djU186L-Qk&sskW@LOK4.F@PP7fl2HZGo?&N-RB=7=@`hm44HVr%=g&82^86fUF$F
%;kV[nLs@imN-r9M.n*][l)<*F<9r;hHF99ghfA^Y@DS:+&Z5AHps))ZA8+u@[86+bEqQ6^kcC+Ga&:ugP\@Q@n\VQ8FIZ&&?fp-6
%2=U-^JGE[nrA<q%dN!8fAQ0#/gA&af'YoZc7_OHkR''f8,Y"9<V0S?o3*uBF$HGW-l;RHb`eWjZiG+Kp9M[Z^<NH-miAWouea)JJ
%Np=MDckNSAT[c.r!sa#h(*"dmZI;LBgGO`k6`L&Tl/uX3fH@ZePZfNhL%H?#8?F?\&(e]uW`3`(g5e)UGJEIJTW6T^eP_:Zl,oiK
%H+fX.ZDL%ATi"Vnbc@PMe5:N$$]GdW:(lsRa^=T7YK+>mrkefCd;5VPWH,Ord_-jdAH9#(kFn<P.8XuuHC.=dZi,Vn=d0i4P>o.Y
%o=J%B""n-/hMBo[Dh'!0^.F_@Bn.';pVeBkAX*,!WA&,KBml/$1+&D;.YX@A$r^%&SSQ;9QF=e%oSe&J8da*h9QF!.+k>f>U>-19
%H'<8GdJu)F7@E52r#='rP)D))[a$`:-oWpu,o&oiGo:agE`(6b1G0U=,T#R4Aj$d;.&h0%jJi,*jeAOOAmD;6T8_3W@noauZht!l
%)Wk1_pPZ@UAU$pE@f1-!(nZHUXfE<$$?"@qL4&<WlcU=/I,eK$]A=\gNY3q'%rbeArqVO,;]H-,e^ii`BZtC5rP`Pb-B.B]0tJ(&
%>/0<\0#\T"(u9km9c+m*\pO6Qjm4QX.QrO,D*FE^?8W[k1eNN-b%>Mf,-k=7hu*45Y>5,g1Qd'ODfrKM5O6iXS^YbOo8a+UKu9AU
%paK%UVnb6Z:P!NMK82\T++6'>L$-fqTDm7,^jIKMOU02Z^0Nf\X]Kj:3LL?SL][YPmp-5O>P'-VBIEFP`lXXaosCD'IV;tNU^ocP
%"9os4)ee-L#H`@enH[s01@OcN7bOKmrPW%rkgMJ*q]hl+b^/F3B.$XR07CBb';h0J[(sp!D$NfZGoRF)0sMnRn*FYc?L;j7!o2p%
%TS\p,!Y9&W"/E,3US?*EkX-&/-Ep.^mV4$el=npVO#AdjniP]1c_la+K^\mf8!<S>s8HZ;I*nfeI0uLS3uqj^K2lp[^NUGK\di7m
%A'ndoL8h!sF=-YK4oKa'6og;+@WSfhhn<=o2&'At[6&j=D9j<;%.kA#MJ/Hnh#;T)hlL=ds"?t0B3HsX_1G^$QFdEA(.oV$gj=C/
%is&<prZ%"?e;t4m(OUWkO/C2c0)]\to+0)d))o=>GGRF7[l8HEdGFatC:36-Q&='/?X0Y?oN'E^r,_56C;7bIX^<0sTt[n1gXT&f
%+rXcbZMVj:!1U!_LAKGijl>X6)Ek8LmeT^'`S]R/.i"Y&Hg/he<n^?3,)^$.3SgANri\,3fcTJ3!r@o]Oos!M\(tbiMu`bPXXH6b
%/jUG1$meB,*`N(J]%Og3<o`(DccmZqp;%gqJDXkPakQJlq<"o$cZ_.*\#Q;$'bI9iaV$6NnX?<EJ1]:jQZru<G:j=HZKpJ\2@iDl
%*t`b'Bo_I^T+s$;kD4XVN+T?J]F(8/AquV.[H^%jUK'raT?W9Ss3SjN&'Pm0)9ab()@Zk%jP!/+j.tBX<CjIm#8S!OmD[k[=SG?9
%S4iJqj?ALpC:++JgeA4FCJT_/L&'7I;egIKS#'.3;aup^7V<38eK--jG&Hu360%jFIsG+\g&Ha`,l6do^J:iZBV1SoW-+kXegd)2
%m=3YB3,j>^R*a,6):rlp1R6Em/s],<M4TYJFA9ECVkm"^^WXJZ:.jp6ZV73Dg?b?s=/sjbl;i?kPOE[`RB9B!;f23$k]P4T.[>id
%2KRXr_n4Uh&Cetml.(2tm3]!KTM;MnZf?H%.!&QQXgVp;pi_TU#;sIDrk`q.nOONVFF0QgkMK1:nY=Uj*]V">5b"lj]A!*Yc0SF0
%lsuD4[8(GN<j-XT&]2R9kCNkRF??D-61K[b=IH9@D+6GbU%/F0>-GAqY'X^Ej*J+2l^fB9q4&R$?>IlZ8VTb01fL2Um8P%3`=,-^
%PAgo/53AJeE37VLm$8-^REal.nsg?r^!f)<dduC`>L;gCa?BNKV;Bu\e[MQVh0Q[DgNeKs:`=1Pld&3E=sU5[g0-)8q<Nqb=0M'r
%ZWsL4idot.*]pUR0_L,b/@#gM"(Vos9]i"W];7upQ6F*p[JM!)^"%Ja7"peMhQ0t8@R4V<H[89heBY]iWY*3dr2@&!iP:I40C19,
%ZeB/d<m/"JBn[DM*n]cKT:K_c^3h=2S\50b=BkkZ^$_2:hjLn;O)"WF"Zm%;M&G6oVG+VNC**,6M('2#S6W?TjZ("Ym+1JWT'at[
%ke-07$b#c'nN0-df.<b'YFQ<Z_`@67EJQt#5@..4B+Y6,[$]p[5I^nJ6\nn)En`+B3K<i#1Hq["5Gao(2d;P^jT;g74FYiI%"9;i
%U,?+DhD27a_F6;$_8Es-Ib`Q:*g[1qEWbH(rs4edg7<QXoX&X*(g0Xjn]SsHg,6-k4$-iHH;NnX4#HB5F,R*#hp[YaS?"<3*L#)M
%L_o/V$)fI[!d`QH>QmlP^eXJXeauGc6Vlg<97%08r&(h4M0.(JMmFF8QXZE[j=7fq2NV_mc^,Hqi\t1;bJ4#:MeOuqJNG*i7aZ-+
%*TM5\5?W8OG4l&F>Re*V,<!U8Lt&e5Wa(=tBD\7STl82(3q%7ZY`[EU0'^O\ZIX1gRl`\OPOlLG9<OePHSuCLokKqUV=oA?F&G'4
%C5qmem\DKY/j:$Z3(U1gN`0gRLc9ILr`o[4](VNDI_A^@'hB?MfY(;,2-VrthUh0SofO@7I+3!2YHIq2fT"dD4tt[opqRObk)Rl3
%MB`2F\[3=5-dWh"g5\D#J[A]HXd=ND_3h#s\^A,0lN%!V7_No4K_3./3i%9Q2<q54]*a);_is+#=`U;D<NbZ=7Pt-;r8_aKUn([:
%9i'_d8Ku;ks$A>jhSe0B$7*1PV+WDLRTC(?pXt=bG?q+F@VrNm61_[:co4K#.Ldfm`3GHNBS[<@Y[js;*cViqY3anr8+ZNh<_S5V
%C;aiA='&>7!"MG=^XR"*KcGO1M92>$7+_,"$dJ"e!-"3</,dO\q/.hPISso$\'HTe7IU5];fo`Kdl;#_Eg:s&>@2Ildcn,]ctlt/
%L!d*[h/?Z"g9bqu2/%THc$=<$H9u&T&4>/3kf5A7Y%HVAYu*Y8or`n[@Q9O&NGCT*'kT&:!4it&>jBs*.TNLNl;bHM?I]OmnHM;,
%hm*X144C>#BM%ppo/,'6SMdj.MrYWG4C]T1QOJ+`DSSn+>"Lkjh-ATp`9B-BXO(TIm-7`CVrarr)YJVLb6I?aR(7ICp9h5,\l\*$
%e>$mJh`kNJp';E2;l`3$([R;LqjG01lQoNi^e(KAr:r+^9(QAa9!p.NFpcpDh%%#Unl=<jSZEFV_oRa;`dLL>7e8+".%abJ0(M8[
%7RVT=AMLO&]OXuP9NL?+AQ%]E1tSOPHdU5<-h-n7j!lpW7hV#rffA=(KM,^1]9Z6A*a]3m>Hf;\XuSs"c(]Yo7$Z@qV#dnLL$TZ?
%Ij$He(r"b-(7Jh.2\!9.g$slog3ig/-K1o7c8T^Qoaq!jaV[(OhU[5NPO*Q,4FJHP?GE@Aqm^fAG"1NeRaZ#6*,Ds_!2t$7=(k+o
%`QHf908BJcXa\[Q?R8]*\^;nkX_oum5+bNN_7h7`0>2nX[2rMBaff%8Po]KN_E/:[@XaCP-TtBjiY"@\9@i^B2;n9kf6>+ne@#T%
%G0X[TG5@@NksXPqiimmE/)IVOZei$>^)L^UASKrQbF@8$YZp=>h0-o-.JHIr?b^$%r@ZbXl'-53m"f<K/30]epXsK9riF[0X0%"h
%+)dA5"Z_,K;uiV=WDTo$LU6>d+I"$FXT>5F9:k,KaORO(]C]I%9HHh_gL#eA`4NH`qGCNGgS@:dT0L4$VQ@5"7<*j?(3l6pV7BC>
%'oF\\S#78mPsLic^6.*1YEINUKOKt<Jn2>YZmg^$pDcu023."i%Pb_9:\;Z.Cpe8Q5skJe0%TXcT@pKu;WGENs(pb(]?t\*4^P5/
%/'VucXfdD-JQ?"63gG'KZ]4i(Vrur$Gq`<G2tOo"^QDf,BW[dEboSc\]dVa+R<l):/*5K/c(!n>k0E>1S!Bo;hQtnC:Cl"m>2=3q
%>h86"4lps5*2d*;<]HUhmOl_3aZWgpT/gaAZsW+=1sNnmg9"E2lU>IVnG2CXKmBl5]i9@LZs:]6*ZUc@CT[0!-4C7#HaCPDPtp;m
%k=+i,Fs_^e>\b!ZFH35jRQK>7_7TSfnQYt.>FMF.i4R^WE4!5CF:dfQrqIqWZ]s4XI+DiCg!:&ta2Q@4ZgHPiFCF<<[lCcn3M:)2
%^PZCm2S+TpcYnHTqEk/:m(q[YBB^i>TE]T#lhs.QXaOQDJ+hg&$q-"k07>kYd\K\5^DBp$X1&kNiO?GpmHgBu/E0s7d\UZPDc>-H
%jg+o4C?`goS"%a]F72mX^7+jY]s..e9l[/dIIqXU`LWd7Ek-:N:UTHKK=)ql=uhX:6*#2'lYPt3MooN-hQmI?f(>kXIVnu]G6%,O
%@ID*s9@K9=h9QK)7esmBoTSsYa2,lq-ab(Agcf]KXn&K\5+Ycf+j5QUm9SGVi'B5FlT1<ag=#!o*O8ju16nE00%P["'7o-@g:`3:
%ebM:FQY.KaV*p$fO64a:@&`s5H@E?oEE;Pcq97k_D;6@tSsi/nE%E*U>P#FWXa7R'r6St+K'l[j*;0-QHJrjXrdOCgoS43Z1&0`9
%O2>19)JB*DWlKT_5:t18:\/Lk?V:?pRH:V-RXVGA$%q+qdncSgcfi6P_^BW#[nl/L.c4Q\iR@.qR)[l_o]'YafA__F&jH&VTVe;s
%Ti]e)2ZM?;@?7n0:i/GgbQmaASDPcCRk>[CIeeE&<-iM-dHnVn*GsY[pEmY[[('6ufWKX0q#5R4OJZ1QhXBgQL41hA&'K<7H?[b`
%Qes2,^:i?,WdQ[ak718T*>XtO*\#g\VdG'aX4$?1(iFgfH(!PlHh=UGGZ]5?]+aY@O8r+MF..G=rG8t8>sN^N_U?<V:?QeLk=):q
%*k4"qS(NSm0]'3T`C"JU"`5faSnRpejkc^13rc;>'L+1ZN!Jr]kDKM\O[h4VMp:J/g%--;guRG6LEYmQm&8b%I0)7IXa77\P2CV[
%(iSQ7:ZoG-V[d%qo$70Y#Q=/[Q[)`Ui/X2m<`CYGh*6=tFC_h?Q`&GU`BM!K*P?;GZe8Zf!)XPg\k_Z,E-E?U*?HfAK=UQBXaKV(
%^HHoRS'UE4",#K;=jG=Z7i*1=FBj7)7+:4@ego4fCn=+M`O5H\(Tj%9-MjjW%h=D?QF3Jh]_1m[e(H99goSg:$iUAorH.-O.^&W@
%&R=FMic;jG(/8s^Q[)A%4l;gh=UU;*Sj$?Ueu>/jef26Gr6E^%]/7ONl.uE<b;7CE\p-FYI*?LL*'Kt852T^(dq_I>FZq>r4EtaW
%^!.d1M9EO"T#VhAApF,sa"8n`5'[B^s0]*"*PK_4\Q<YZp:HsSgA+h]^X][^bh`,9!Rp[&1g`66MoSbo[Gq+ARS'g\%pP)ea_`3S
%P$m+gg$^Oh4o,)c06tij$\Y,:"GaA"lLqauiRd>)eb0%6n+%KK;0D1Ho@mVZ/D4s:r7?Yuk=[i#no^;o_:niVoqB!ahsToWrGT5&
%GT*u[/@<R+pZ9JZKXuLcpUR!_61D1%8*qB]hbrS&aYQr2pSd;gGlK%`5>N*Zce$pOS9n):hqgMD8o:c1o=\@$r/%<0LQYHqmOlIa
%ZRb\.q'Q-`h`<EN.g>+t_e@Nu:u@T&7jUqq%N"A"Bu,'Tp$SgXoAS[e[fIBbr9hZnEZ/8WXSh0q4);9qk68j=Y0GFWV7[gclJj\s
%;-C9`FuJK^bF</:j(#ef%>,p1Yd7i;@6ek:!W@X^qK-M8I_=LA'6<9kLH"`'fHjZ1^5st[cI^gVBtQCJ)p+Y/kDCG$$k-3HrbQT4
%*3`1AK_+3@K3.WrraEFSZcY++/tWq7Y[953HZ<Etr5cQtSa8*3*)A?jh`9UYgffW."Q%56@QAk`l!/M&F4b^2S"QTOe&OcraK@Y^
%rRY6UO7Vpf$k+2P@(]5sQ@K^.V=FBfh1m>+geQLojufN5_c#@k`)*A;:HXV!aliOVZ+kdN7L$;h.J!:H$r+B@:pQ/kmi6s?Gkq_o
%Z"ls@E;tdo-;YM0#,(XOpY%2Y#<uX-&fG4poS_lKBJ.0%*^1q5i[sB3E:U+17(gF`[Y4@B+34pfSH@:(pU@Y"J!pKE@12pVF74!T
%?k4nXnc=Ih#X+",I0)sUJBm(bJfjWp&0Y]ge';sn!G9XSKlId<h`lA/"i+b7%B?@fniOH:)`19/iB_UA/<^1,P\<q.61XqmXn[&;
%rG;#TUYLu1h4G-dKd;#3e>pIV_V7.j%[Up;p(it;a5??DW(j3QIV4iZ(FW)r).6&'B_q*b"rK#$E0u(K9N9NdeVBdn13gSsF<E^_
%FrsCH91Rg?%u$?'^Fpp">261@[i0s[L$^OqI59hXeDN14D!B0XEpA#CfrrBWfl%tiIe]&lk$8\80:-<p*\Ws"SP9s5C2s9X:jo_K
%4J;oG]]_i`]s5`>Vf3j]CJrP'EuOas<%g.<HX8JI4-,uW2BT,@IEH&:=Y_T,%tDum@Qj+;])<RaWHak=[\Xg#Z1A2/p+OI7K.<tc
%>0m'Qe=1g*<fqb'@Zbg$_6(#<r=(jPS5FOA.J.iNTSq+X&lXV2s4@=!ri,C-d6+'>*pt\q?MO;/nb'TA*S0#:(Fpu>p_rT7gRa&;
%',//[o.jBLr>(XCm$p4jI,fLV>@6.,DnL?e3)=(2FsVbf&5CW_Jn.rT)Y9mt$7h$WF859a[;olY[*Ir+@HI8jQ&+f"4M3C[qD?Z(
%3PE*J7FQ>7/$T?mj/uZs<R!bd=nCD@KkYl2n@L/g4kn<kDf/"p]&%^3V>WIK0(N$7rFnq>+-,e@*IYLV98hZ]Mc&DRNW@A<>Wc>b
%-G+!`_!;TT/BjJ7MoY\9Xo9,"S9JQq-ZoYao`D3NC"o,rir&AF>]6:.puV+B42p;NpT)"ESV2T%1Nspj%"n-)MoF;;$_."Oqib*)
%S_a&7nulD;n%qF'J+<6%gG]J/pRU6P]>*U3S`]2fm>YlH+.O5rmKKq(3-@p2`J%@Yk`%O5rq75U0]tQfq[.[laZ50C<YKFhS1[!4
%oX]qjV!#skp8rmeq"Q-Wc+V?p^=_tikA#;=G'R\nFo0/LihM8b*jMlWA<4u7)C2AlMT*8a[uLHh].h#"V6TO`p%849UZq.a8]0a2
%9u@gom.q@XbO]Q/7I/@Q$i.*B[JX##ouMAc-qhRA2ciq`2Ym5N.UGWbDVo;WL5^+1K9Vm.$n.P1fB0nIX^*`:KBu+VZ'N-XSJa2:
%Ers)$rj].MOZ\[Rfi9Oq0C.D/<e\"h'd(0Im,VNf<u!a:-SJh,$C-fg-:YhNgP(7bc^_l#o/jf;Zcu]MF6pXA(D*#-p5)"<rHc4n
%\*EeOj2H=^9@:9(NP7##qs$oNH$Sl%]oTPu_cmN+(V`Z:7+b?IqhP9B]D#tdU/f8WpsYQ'++L3uC,X;Q5I/bSMX\#@6EKk/m6P/5
%rIT<=\[q]M@t0QhPr\?*K87Y3C$/FORu1Mc.sr;qCfj-195s>NbWgGq^T`#^qmbkY^<>VF5MA6DDs^47=732<%Mk+*V3P"f7)1p1
%>Zgs7p';SX(3^p.4hof[]1$C9<k*5NmWNU=cMdKk"5:'"H?aY2n7(\A<+"allG__q@mZ+;p>!L?m@t&$ogl0%[?md5R0/b!I9chC
%G.P0XARY=NVph,]NDB?>QKbIc[heq5>^#%`#Ig5RO"9gFJ=aDb2tQmTK7hk2K@fFbkfpp4-l1Z(Irs)k%!;0?k<:ghI_)Q&m\A]?
%H#DY9QauCJLW9sAn-%%N3h36&cSRj7@["OKDu7N".jplX&((!=0Um-nFJhj=Ac5.6P%Wq5b0m>eh.L@3KL7INc-"MdXcK8XJ)?ua
%?ML,=*:7E7N]-_#.>Mss3/8Icl:YWY'Ycl)0@\VO^34<'o#mS.ip6Nr>cQVolP#/&)u7M&e`K<1,`&qW/>#Dt#EMl6@s7\0_VF-b
%;D#?cS"EktAYUk;oKkb:>^=<;6sh#hJ#IPYT@qcY>O0*8klP5KkF4s\O-1t*<Z,[Mr9(!WnnChE<YMG&oSISbQo9ICd;aV\-Qb`\
%XA\I$%UQVOMV$=[p\CB>;Z?8rEG=BNlhT?aC,I(r50dNj-3*0J)]h)AV;clrP?8FejZBpfB&?W"(W+YP?Ga8,+(JG<I)P2:\?pO'
%26='E:?[1["3n%!f2&99"tS"9^42Msh`E<S\E7fN&Vntk+Q)T?llPM8'8&M,0=lkm<[G@3qs#+33ha48Nu`;RfN>GqU`S?@cg/!X
%'9\+Q8+<2Npo+&NCV88!0=`+L2nF_+?eXnab^L.U@/f-@HZ'0=hg\uqfm)eSa.(\i8YR5T=?N0R;oJ4=H_eIE4>%W?[)a;1%SdY4
%\D$r[Flcs"f#rcuSM-PN6*lhdU]hPO^tX\+ki"m^X54SX%\C5oalmdGDt4:e]8CgiIB,B^5<^Qu4M=fB]d#;l81s@[B_M_%j(VOE
%Dde0F!lK7aW6TmD/^^+Qb:qaB;\)712><E$V3Pup%CPD_2?)re@K,NUSKq(PWY'ZZ4<Cj8SG(/3oCS$OSG0?C?\<-mZdWk0?L!lO
%hRQHLh(GifQHO`0VU"<FSr%etclV8#mI_Zo_u%]+1OjA(rF6c"rKlK20mWpqO](9\cE9sT,[5K\h\ldZ>su(LLj]:#HXR&T6aXMT
%a?06$nMT:U=(f)A^'38tYjhS_Hea+J$!kj_6ERn-W,k4g<K?;k00[$>C_4^]c\qI(i@\=Q2Ekmf-j^r;_)Jf7ZNp*(">g5KMY6-C
%S],pRo]oXYs1B?/?f$"h+!`^[]7!/_aOa'bKNRY5D!d7HheK<:$8WXY/$T.uh!M5V05l*(qoe*Ujtg.$[p$c4E9m=&%HREXXYi#7
%k718Th^@ahRt8^:TH]rS$J(&`0BXrLo:D[2pNCh.j2!S>iKrn"r?PLh?(\854heR%ZPR[a:Ao?E^0Z2S<7&t:\p]n@#$<7oq>8U@
%jli`NR&B<^;4goF85H*h5C<tLk1/MGS_8:hlc*4fHhGF6(oF8c"RcheoAN<RK=HAr\\O-imZMm;d[mMbhEN1![iQloIes#]C7*>i
%eNqd>c%l1oLC":']_B>0dW8:fS'KeT\(Y:D4K(M&*u,hE*pS#c(jX>L'lB-i^0N9B*"o,eGBYN<UG5!QQ8-;r2?S]N3har*9mXt[
%H@C3QJ^3EI;<&(F/sj2Zp[V`NG8kk&3J1ifS/TpHn$l7M]5Kn%L;C3mk=\;e/%<K*?bX3-s4[ELGklCZFtXJWp;sjSl2L7jgugVl
%NWu\b*Bj#-9MGK(0o=kAe,38&J(nVX`/dR[(>9;Vh(H?fiPNd#hnHFAH4bdhdh4Q'"?Utd#5)2H;E4<nmJ31<Vj_o-rR!Bg8WUS%
%kDNo0OZc1aj&)HF*89tj[^A+RmnZ/N#]:G<4b=I@Gq%CK2!7q8ms`A*9TVlC]JHT]O#@g?=gbU,m_cX@SP<b%n,/A%YJ+s@ZM=*6
%pBWc*&(l-L2J.-FF(ao_8oc*\O0`cho\W@()uGEX*hQ(6=oA+bT<LlQVif=_KB)B_?MgQlHhdR]Z+/EA_/J5nGMWHarU#N'(V[!`
%j<njNgmm$ZYA[!?SN?/N1XC9%-60"t?],HWG7'CGO3@,Nmp@^0_jOL5H,"Ml-Tna4$#q-oAG*ZJd]jS2CuW0VN_&ZuHYeEX=Oufm
%,VH)=k=TZ^h[5F2^YLCm8'TcYQZkr<M"bH;?dSVLH*d&2Rq4Kn`D8TOA(papM[qmjc/l6VkV')'HrpapX08GI]<P_,0!JZ05ZiI/
%_fGI!GdutNFgDAgW-t'objQ8"O-'>0rFP6H'=+:/a8h]2K+mq_HLt`cJ+iY/iH+DbSHQOs#%I1rAC/GP"2OE9=*.e&*A(6rL"6%J
%gG<SpUL/M^;k/0E)!3bAbVU!&45`Eno8"<$<.B1CBA)bF8C1(Op(,LtSlaRn*BR1`7-oK`CnsAsbj9B7laN:0j4UQZin(0U)AM_@
%nD`#MP?;*T?XW?Gh!2oN/Mm:lbs"El/R%h0&C.SA(X=2r^P=Y`VkfO6bhi/c,)M3=N?@O^0<\/A7"E`B6r#i2jmpm`1tnGrVg"mp
%b9-1BLMpD([c_VnkJ$#$NliBDo)Cl?V[O%^-5QCIR=W;oZe9kSrjZ)a2:A?UE[:sJhJ@XPYOKe-8[?Z&Q^QBM]ur9TbuR:@SUX/o
%gdO6_aIM$:'_gV!4q]B^Kc`/@;X%/`rMW`N<tD)]OPBnhgF=,49rXo'&iQ6P>']&cO@tqGhJ>$l8$1oF[F"iH+a5Q198:-a9^*A]
%34N](HtC9+^QS)dI62dc`?jR8f'Kb9Vl.4[RS--Ccnd;5\>iXU?:"%CTbNUUZt^uSW7OR[OP?=(UJbj'?c1lGocO/2PtJ]:X4,B[
%<jn6LW'SK.88nDo'u)t8h]s5UIYg;H"`Tcn4DfH8E/r9YSmZ=*j"0AK]S]$1,@g?C6(dWJcdl:YZ]U$j-O;JN@8<H7HWLWS*e"&$
%:$8IA\n2O<ch5ZQ*S5si?=G%('`rl)rVC+]p2U;JMnEN'Vnc"HL8XD#`5QA<]Sgqh]XW$7_0Jd\XqopKi5D\9gi:Vbmk#s!Il]@A
%^]DI\)IEZaO15K9na$;R8MlgVoFos_C[;+LZSN<$Y"W<R]fpDWY.QHCa0g\kC/N!q%,OA!)n1"snPSt6EY>FG*ik8e<L/Kb+8FJ*
%Sli;V[u'Y6m"$MR.=%e<aB)eunmHcW)I,sa#s.Go1rf%WRD!,>c!;O-@NIp`6Fg)X]rl6iJ.6?)?:8f_(YYl1-<];-?&Kt!hH'Ap
%CXkXI04X1f1Am`r/KIknqaL3[ED>E`[9a0mKb\krZ,B_"'M4)nPPq903pnXklUsWY?hX0SmOBhKamV0<r/(uH0=RDIV9W9/B=0*S
%]i5&_WF)G!ZIYtM>4G4co^a^gR"7uUBs3#tZ8cf"cWP!@.X[/pC5);Ng-MiB[eFRXP=4,_CTB)mpO&+MokMkh[mc]lfW<!lrT8Ff
%*Z=Z(lB6b/Uh]4&6BUMMR(JMLV:69n@cttk\Q<84YN)ERCbmQpZ-*5qo<7+P679DaQ+,fYO.RjqKek8(JHo8m7BE#\$/Y[_R'%/(
%nPb:pr=W[JIDjam\9>tm='gHUrN"!FoXdI[dJ!Bo1Tr2#jBc2-6Z%&AJIKdmB+(2qAg.4Rl;Vtf\gRB7;QYD-@-"G=e#kHOlm-N2
%\ISIoH,sP5i1)Z1hH!RtGKVR]&m(B*EJI*52PD-1\EEGJ"(cNJKbM/@]M7b1-$P%?iWYfcM>,fS^W'_\Rs\koI8J:fOBEB,[WiP%
%Z+c"D7[`Un?Xl-`\1md@VUS0_cr/37deiUJ%k-sCYVWIk\q_(^Tc!I;M3gN5g*CSR;tboUp_cI;V8E_V0Iu1YF`%/ns-]m^pVY3Y
%K=t-(//MTbs(8[#RE`Zu`VJW^;<KmO3u=g%S+DVs]]>Qn(Dl[S>4>R6i8-9*Z\LJknLN)FrIMB=:To"'>O&\t6)a?Sk9oK7T@RPo
%2>OQP+o^of^]3Qh;GM`#Q"a>8))XDp\s]W=jW$2d0I<\B\VTT(C(,-sB/4/iV&+OcC$X/5lA_YV(Xop_-$ddZdlHeb.[(^+pf\5<
%-p+%2Bm"m%/5,J"6Y#@'kCk`.>*SSFDUDY25`Y.[Ia2p=3.B6!Gn)c&3>L!%8V,#%6Q\!hi.prtB6&6>=k6S5'9MI8k<)o_%Dn)J
%=`A%Ng6[PM([cQ/2fe#j0FSZ5LMi-4\Btg-bn#PX+Pe"jn>.FM6XBdYkflW7&rS];0\Fo^c8\plnoEG-I!-Mt)sUlG1a-6P%oT1r
%khONu'RblTjXKG+HrhA2iWn^.qk0Q;0Zh]ZdL%dDd@R%q+9Zn%2:UXI6K;j!E=!J2NnQa)gnpj&HNcT]i"k3oV8XTS\L"%7>*9*m
%("g>h56=^q$`DIh,%rirnhW<6B`m1I&'X\P80-+27k.t1E\r>>X$EHC7Y4l_j@M9`P$S17#7U\lKNl;9`$0:;d-sYI,@NdeJ<#bm
%"$onY^`@YV17k!2JSoRG7bMZVjCU*5j*?N%?3QJM(@Bfk+3;N=%<JZZQ)0`O#NF)OdRIe2_MQ?6]_Bp+(1JnY[Q?s<*d3J]4l.l_
%]n=.KhIAT)2p>tW$!3B*FtpDPA7<b.5Qn\)-&`FNeIKtBO>l_F>3IKR!^%6Q$m"Q`7"W[*ef%X^NLk<!`n_bVI,!ZH"SL+JqSlDR
%8;jGIBBOh*#m(hG]I]DjNlb;K%q[=KU5J2?)0GJ?S1f79VL3,u4\PSQm&8.@mEL.\'4n$^B&:4\q5C`L<!QaT,Cm',:O:.e"4I9Z
%]gJFhXkM-1BPb.5Zl)&qA+-BAm5&`M2pnY=LbL!.Ue+"D0S]:T\-)IL`eO-egH=3X#iI*L>@HFYXDoF+o1%5lFq.6/!f5">mWuP?
%ReBQJ`7LrQefPJ(K_r=$,<VVG?li#Mg@YaK)%&gfM]_%]$SYGJ/,ak9NLP`[G,ZQ9@#gaJVMJ>d.`+m"fNCdtdY]%SFsX1fQES_6
%d^MijJ,s7\U!C1q!lHc]e@pP^g/1?ZfdJd'0#*'PSXda%]@TZ2:%Ug%pk_JIGcn;ILP4gm9uMHO;"8!!=q0s19n&n7,pHUTQ;E?!
%/(5F*EhXXI/!lQj*6\XX%F-e!eEuV(`-MJfYQ_k!`(P\sH9r1FZoq9\Fj7?5YQ-^>i];`NfM\FP/2&3K!kN.+U/&e>(H7W@,brEh
%FG-I^)-K9Jo#W-SdGV-?_Fb+DpfXh$(F6,7&0cmi*#oGD70N]o(H'S--pHD$?jskh77X$3\]>)MEHst$OXo6Y2?_M4U'\*1_!2";
%\UuTsBCS,:f-=]WW"K)kJ@%^-54<E_#aG+p.$@mHBE8bXjTWYj-K>b0e:`=&j!:+[K]3;J6<P<'4W&fk)?4O]fR1L27$-b)i\M"\
%,c`oF;M5AHT+:Q_K--264$b*>2Bj26JG:!N"KupC=Eea.8JKfI#^-WI-ZF`6LaB[9.oOk?I3:n(MZojZ\rm)D3nK+@#^R0C!YGO^
%nnt`L2%grAKb-$HA33+E&#'p_ltdnMN6f9QM@k<[BZ)l^O>i3ne6li5@t!Q6oUtB1*9#9fnHIg+0PDsOKLEm@"#QbFlq03Dpb%du
%LHm!8+*\j!!Nda?AMcGJQf/"ncr^X&,2gLtY`4V'&BB?>79YmjBL/H$M*/[XSlPoj"rDqXUp3I(&HE`,!OPjQ0_-2qOEd(9L<#8\
%bX6*moi*1eF+IIV)Nh#:GgmZAMO%\8!=+pudBc#8'dP`ZS%@'La^><^=j^<XgI;Yd]EEJ07Xu\B+Y,.O<`3a^-!1=/7-]U22GLe$
%&IZoQ*^mFBF?1pQqBD9)dYK6E8H*7r#fe'>3fF=FTcZ!&`t9h!q'*o>8=oD9B^$\$`J-m18cqX)69.jlTs<Y$<(`:EliBVTOgIaG
%V19e$CS6A\#3*`38d&ZTe6fk`K>FBeBNT!p4W\uS!WO0ji^:O]*ZqD[M#3s$'K'="YQPZMO0;\R5_C#+bKre_iK8ppLTW1Z1g?Y0
%c)aE9lMEun^`pXE/HCL-i4&D_0d1*#1ikB?\r<Cl\j2aZr?OE^^]`m;63@:#1J`^VAg0b=`WJ<QU;N'b7H:.m"@5<Y@>J3`JIj3g
%j)]Xr#tPpZZ-V,?_;RcB5UJi,@ee#06pbd<Y38l=-*1/sg(Db/"3(hf,m'3R,]S5e6HGalQ(I#A_UA^K;GFfkGZ)?R3?b.5AVr0p
%E1UnQ7@VN4PQtJ#K8"Q*2/*HJ@NQj4GU(;ba;NVu0THj+*)^3ZJ$&]GbVES.a#ARigsRUuE.E4OA;>pPVSV1W-1jIV)"D9#*FFYO
%j#\IQdH3n@BTT=]HJD/KfEVjc*+B.6.qotsDIaP4GnB6U=;bf!KFrEL4D$gb&YKh9r5$</o=ubTj/CAAq,!PV`WF=af5n;14X$_X
%fboY%a$?4YVU.sQPgRi3@32b,%\b,g:(eV`YY`>t$*;9@RhW,D!LN>tLsq%Ke4j&>njR9b'rqnfk6N.dMf''V'(#eb&.1@K"&>T,
%[)k`!h$ZUW:pAQ1[6FaknO[GgND[JKNIu;FN.l(`Z-BHs;4`.`+GLJ+1M6mSJO%OJ`Z*q/=9+i4_"oJM7F<8R!u@7-joiVD!0(UM
%L"QjqKa_V?F+gM(=1'M4BrM\t#K^:]+kSprM(+HeLk4fM4V&;&RLf9s'O=anf\GtI7Zlg8oE1t:TUat^-\RVeI1t<:o[-<Q,7Tr,
%(g8AhJ*965qV4CSlLcjU"!W@h38.jDE-u%%nH@/I6QV+9#G2GmNAIt!i@&<An-%[B@=G^/!UAf5XS7RuK:-TNPRN[F_\si%JhWCs
%d'-V+$oFq0oUlLu(BhB#&g<u0)Ggb[c4JIO]L^(@+tAC7JK:<E(W'0WZq$KM_&1bI8,A4,9/op1J78md)59dA>6A`d"cJ?_A$n9B
%$p_U'7^1ib-]-ZCYf1$?O<P#Y./!+MP&UjKS><:f%K!h0&j[(@#p4f@K>RuG'Vn:<il$oV=9eA-8^%CC#[B%6\'`&[&Sk87+:Ja8
%:C3#`!Fqop9e$/_of,_P()oE[Xs"Tp(ID"i:laI/,OD3NFLagDK%B._Hq1Wcp#)*U@4^t)1_*-!Mo*JDDjW6$nfXVR/L)N@Mg[K#
%*siG1&B[4"$/dcQ&=kBdOX)Q4-1;[E"2aa?f`c?XTGp0_%*DRPZBiBN_((I0p/=g%Hf*bP+^394Yu$@12Sm*@fg%U9ckG31DnU[^
%K9QU=fV"28]M.5mI;mk1:UCb7@sAH0*8H^aNeho!_-Xr:dq`E:(6N5@,[4PT'\R0[-Fc^)VhAAaRuHiM(HdB`$@7Yn6\8s9XW?75
%K*-\"&l5f^Y/F$?W=V$]*qeIq+<2TrAbD@dnDFn,O,h/BHtD90AI'LT`jKS*j-#[@N6'#1!k'#+#Fb9jBnARrF^aT^49LQMh]cP3
%gb4dH#*?0)$+1^2Bd8[.0%_eF%,eGZ+\.c*B\O"g7:NC0JG!4P5EGN+HjFfu'pPc$6^Q@<)@NYhOnOh_,8MDmM3#"]D@1[D*?*32
%j$s3<!HTAL?(YaE[Y?+eDr?4f`Ml1k7s#mG!d?=[[#")^!I1bi0_#W?V%-MHS:[i&A/"PO"nco/,I'>Nn.n).c7$N"Yi5Y?!ZiWg
%W5Kt!P+r"nXO$q)F`[hWKI%r[Yh5EK[ui)0m+QCaee:pMBQ73<9dIK]=IBX\Xod7ngdG>[bBBA+o>25R'H>s[C"+;".h@q!)fC`?
%0\T[92:<1j-&Vt$@`5M1#>YQ_XNT)@Sjq]D$?9bCV:_>2fLl&%.X;fmW7a,(`E`mFcja*&nKFP&LeU056J,W\J?Ok,!#8LlEsuk$
%C'X&MCq!o0>iNAg\Bp%!L1l=-+SGsKL(uBE,nSch@4#-Rf(l-"R0?m-MB,sSB!&.36YPet7Wq)8qi.B&4teU?1Q\gU9oa0#;KDn8
%MjFdQRZW,(a[C3\UZ\n*LaFd>-Gk2sV=92cJ4l"U)-kd9AQiZ0p"BN[pHQU[+u#;Tn2QPtP`@J7RBt(@B>b?m`YJ?cA?g_o-Z_65
%3#gMaY^Or=U#/M$nJMX"R"?A@?cAt!K-%%bVsQd)_Va:!;D<d^+V9-8aKFPg9IQ&=/n7P1,P>U\/IHM(;qAJ6'KL_]$C!X[ohK1g
%AQTeS2+0JAY7I=l-ks<'FX11m>fYhU<3Um9'81D"(=S6[Vj;B4>W=T3U^M2JYl9#c]7l?:QDud*7L1ZXP1(RQ_e322<)6g+SHu2*
%4=eg8G1l1H*D$Q6gl]*h,f<'5"-`-mJM5!i]16-p&.<-11)!b1bB%'-ZIarq$D8\1'8oC:)CU^hle=V)%Jnglk7YX0>/G*kBm/c^
%1ks?sSU=3IIeL/dkcfY]"9A$mph%M"$muQW*bIZ2&2:6M%/c^?)nmJe#qds![u?DMdm65kYS\^U2%X!17RS2GWD?\NSjJq;`Tm%,
%[/c,;.DuT@&qI.Pa(D$gjR,;uKD!-r*"ja.8+8.K:A!N.U]#0Q-1NP,b%EK,Q-0akg)QhQ_Mq)RXD*>^,+_?E5qifj$,D3"%*UGc
%%3ST1/90+mN>Qh&fpJuoX;@.f/)nd*-1?YtabCA/cOmW%8K!ONOral"OM)dA((%0S&:4UQG\S')Z5s0D+,WT#$(.<@,#RuRClu&a
%$0O,G"Z9"1:P$,<a%VRo4:d`3qt\'i,PDb[@/kaOg]jimP-"^/cN]P["<]Bq#VUHK:*cHT!h,qNM-!7l*p>p*`E_U=a[s;YNn^Ln
%&"m0a_Qg9-nQ)kAJ/ZN(Yc9pt\^,gQ;Gh*X63Qg&Bo!<ZKf&P`5a0+s&RIfZ%2;0Wbi`7B5jO62&:1RLm`8k%/*MaHD8B,s/_G9?
%D$(IQ1jGSq4L2O>gOJ3k$XoGkf(G",kR9;U$?10o>OhPV,>B4RJNheq@5e:l#0djfV]G3!cl+\@@N!Tc\K"2e)2UgL;hYSB=iW<.
%9A?s-*);NQA.VOhhaHJt^gGb[P3<PR,Q`f=(pIh,"el;H^ahEc7h#ZR'KG_rKeBH34tLYFhaUc]`V1M,CbSn89_8g96P^GlELkhc
%)odS3/e,fY7)h-<1(:g6+@b'=0=5EOd/fH4O$Y[RdtB"E$rdfm807sNnG5]1EFH`"BFgdC&H`^X2HeB:=dth#X>\YW$;?_9DgeOZ
%S9SkuJl9M%[Xf."A0!AL(b`0s/j?rsPdi7:d>X%B3sn#5+^?9\(;el6o?EC-J[XW,9tiH<XA7apN*s!p0>P-[M-,&qk,R>g8(9BT
%UbI]`KKI[X@f":O&4$GoKn;b+T"FO'M]D>V>J%i-#joRBCZ+U><PZ:89JjY>q&i.n4l_Wre>*2k1FUOKiFeiIZ6ehR#Ni7p"G:=3
%6;"ds]bfgh%-M:`"%<$\4nW&n_[*u_*QIMUp(27rKRkP,1L2oiJTJm.H)]>uc&5WMUqp*F5hRKIA_a(Ef<\2c"TP0!"sL;tfE_tf
%DR=YXDut_9$H+eC82#;?._.7pKJK7*q$>\>s-.6Vp57drV@DO\%CCeS3a%AO=-ebT$g#L*%XZLJ7&0!&9d+N+GhTYBiB.AML!sTK
%V:iK)/Zu=&%;S2VZ-V;@Y/q$^+3GS'f>K.%JDfW'/84DgX'.mV@RS\lhcVE&KR7\uP26*_KfF_eX#`M7"!8'O[%'oZ`6PnV0F!bR
%9ECmq-%H+/Pf&`?GQ;")MM!3KBeWa&d^&s':,9u/WFIah">q(ETAY'+4O][VTCn%nLu47T3hC17eNf@-+7bA[9OnlA:N<fHa$Qj7
%%d/3fP9@gI;/<%D)31'c&rJBHk-ugV%Lanh8AikPnn?r*\cb2<C-.33RMnR.4Y<FS_E2UR+C^[!Son0dKsQbCLf_)Wo8n3J1r2-[
%AQI/;3uM:8iRfS]D@nZ0BU1n/a\?0c+O,GmLmFJS%N49A"#s:gO@>2Q_]e7N2Om'6(N1A$;R))oZ!l'!N(akp*73WZ@jI#PkLemA
%hBgt2K;ns9Nh'_-k>'A0^>O877LqLhn3aumk8Rl#*k^e^[fhLK0Hb&ie-idl,3Z*LBEDlRfoZ0+,hNYk"lb\N6KB/D#_aoN+[!'\
%*4T39n1[$J19X6(V?R4'V:kh/OJXB4"h4c`'+RU0F1H8,oARKe&T[^bF`IQRJ(Q)]#k/iq**DTP`5la;Od50eL4\?K\1?LS[&J/(
%B5K/jNC#NA#o:e2ZNu9dqn(i7#1X=KI(pDh&^`#s:D(T3aW^4_rJlk<:[E5M+Xf^$WPD2OGW2=2ZP`gcJYW<*0m@3T)]\pR2RaU5
%&ZM&:16RZh'>(4$O-8HaSi;0Y:?GOf95I:rUJD5O#<.u;>S%u)$BlfRCbH7rQ01U,%*-aUb!VqK*;sF"!Q)S?<d=hX+,]Lr7S[W6
%O.IQuXcVd\$71#E:!e0a.C(`P^?QY_(=kC93[?N2@?1E_3>W&2oR+Yfg0O)M0\CCu$Q;OLCOMNZ;@,ne,ee2ua3]C%6PFJ(8A&?#
%;Qs\G-PHG011['WJPCt=$h&d:]\7uBic'i*DSj&&n,)'/8"qqth2%FDJu+fIK&,hgSs@mJ(G-EOqX@8QWV@I<gB[pu31&TH3N4Tp
%`)aC@fII,b+b53lmST:f_?$_SK8^:(%umfb6uLp@<#gKXWrlW1*1H3plniE&co0i+[e'SADli*(@>;"-"MQW:HU3]:]n`A):gKa-
%_p*#([JWR=*aW\bXDKXt"",qR"sZl[K0p/@!BL9G-5tOE:-q*Q%-i$="-\rjW2YUK+fukrg5)6NCTbXAgM\AW)VIC,jUi[:#`XTb
%^@a9BTR&Nf1oJl#@u,(;Yn=o63Lkfi,nJ:1Ckr`[.tHYE#jnBp*ZQZ+N[09@hBn^=(U4'2MuR+?[jZj?/s'^5)^%U?#qdBg-rC)"
%-/beVVWITs=X"i/d$luTj9gj%n@;69$$BY+^7Egeq?]1&:95t"9T.O`V@[c6P:Kc^g]Y)@Q>ANM)`O$nafOMK42TPTj,RLW]K!@[
%\Og#+PA&a:=EK(dU#@tm.qckkLZD(++[35SKPGm3*[0H1Z/Ik((^;!R'\Zft#VK,;2mB64VpQ>QYJm7HCJOA<"c.i)aU=o$4cBt3
%).?);e10GKTG>M4gb.Zt+]$ZV6sUG4i,sr'%pR+&DCJ5-WsQb+g?WAh#EPaUUI[9nBA4![a#6(Y2]R"M^a5$9.;-$1*[AJ"3S0b=
%]f8juN+-:h%7,b-l'(lik&B7rk@`cF7hYqhY%3Hr2&XCGTZD=nL*BiDi(b7Q6D2cE[Y),pDU8-MJ`p@ceN%7r$^[^,2M&>VZA!m"
%B].B$ceO3>ETWh%!9i421E_1"3"/qIgkbka,tS/AM#iSj%2(sh,)L$,\Tk@#&U&?U;ZO9m/*@*M!L%O,2?M"c_(7teWR!"U&6s)u
%>Z`3rV`7Y:ka$k2+;.M5R?[A$]Ab&MJoCjY>/;MQgdE,W^_tT>40:L3n$$$Nj'W_@ejpYbYkMf<4^eNX-oj(/)JK'X/?p4e!U_r$
%>bnrEAm.;!*Lu)!K+M`p=sa\u,01[AP\8TVOGV%W5]ZF%Z%EIA+36HP:RS,SX4*Ct#outj*FW&0Oq?VmXu)_m+F8K-,(f>Ed6RjP
%&T*<_DNi(sq'$c://&LhnlCIIG\At49a):p;W/fp"Rm9Xd4p5Cj/:s!Z`D'o#Xnnf+TQ(np6(12';l<6:^H=j11kp2@Q[+lB1RCO
%8XTTYn1<(M373uA(,6VZ2B9MhN\hm]&HjD@:u14\M/4$N4OBkJ(Y,b8f^6PL<f[n`$.67mLnm%l(TW\p`_E%CCgI7'4`07_+4_qb
%#[K@[Tru!#fdN)lEb(5&FqS5Va0nLZNYj#*6;mFf63nMJClkABV%FHpdKW*qBN^ub/:fs;Re'O@joTB<cA*tA5o`uL3,9rfi.RrR
%\!\BZcsr\c!'k,G53G>.@n93R,6\Bjp@BctR8S[q1D@]_*YO-g4,sRqqh)+?aALqKof3fqS5%bN&jd<W&6E&C)b<l1EnS'`W!U,e
%3&eac-4H7OXiD;ON6<IBaQccg)&BLGg>d!;,aTXuR<+0l+F@R`U=Deg&(\dh0JGgrG6]b2+D6'-3893&=s=?D2F+>5`.:^dZp=aG
%-hh0i>rg.I.3"cc"p.Y2,&&=U8G\LqM:"j^Ag89I83=/2Maao.%fM"+#YG`Ma%7J5"C[9q_'0[@^l.mu.`"\sXqWP86h$?O2j!!s
%M,[nDE[4/r@\=OKi.e0G#c5Lm]L5p=0o8FJLhrWBL/GjKB=+u?9m.m5%sGpPA<WY)dIIH$J+/gc!Rle_?k<,7Tg)$+@t>SW=^9%N
%2='W!&bFD?9u7qe0XK-'*/3aZ%`KYXb(drj57[-;CE!;u=pOrMIKT<19#qS#28qU6KIpD5n/Jq^B28T,YZ02=6Z&o',Dn?.A&BL(
%ooZQ%cN`B-MBiso?7nPtdKJ-5[4ta?@5sCd(Zgi+O7cRnNge.//1jM<Oc=+@5V=2\BZ)l8<naqRP%[]#Iu9h3lkJB5Tk'B9`c!8@
%O\J^Yj@8^AT[bKeiP<k&Ec;/U%`[-s8N0P@(Wc:h`9#r4&LtiX4%Rf_r"4ql]@,*g'FKjj\8mr[Z7Q*e4X3KT<t:E/2\n&cjCmuF
%JNUnqa+g#3h1aEWjM4L$,UO@Nd.1]M0o.3RR#H*(=C(PBgt9TF3&*d\deC7jJ=X[a/lVCPK?7]N+]g21@:61C3Rj(kL-gFl02Ae2
%,8q7fL;<XcI:)PX4J]]rpGMM0@f\PAB54-*\9>Ze>+Q=--s:O\j8LJTjS6_i@bBI$7@(I135[,$o6.XBL`8A#!8FWk\(UTE_LmRt
%P\*L?HmR+=]ulVi6?Z`Ai#*Y;'h5XR#Sio*??,mM>Qd-"fQ]/hg>Z/sLRojs63s2OS</>]4Di`aK5)OmEA#,]@RV.-Sk,/R&@,4;
%Q9Z]UZYfah>,(VeL'33cb1;Qh\hoM#5@nS6p&Za<+_cqSZKI/9LG1(>KqObDS&&i"UcW&oN$(^TM1@iFXs,LTAA\Y?NNuK%Y%]1N
%37)`.>8=CE)2^T@!pNrlO;q-9;B-D*/W%e)Phb")[K;\>n@?WHes.<h"8sYYZB.E^aO23Dnp,dm^rBN5'Q"U4=CU3m6Qp"#>!-[p
%Yu)K%;WmjS<ZTne46">A3"lbeUmsjS?i)Hf7M;q</Qj/jBddJOf]+,;I0uQ;kT6FTm7A[]h+^MHCBP[20*N7JZ#Qh<Rs=Ff3MF^S
%+QZAXhCsnbdKDSjJS$j2E?nkN0X61!0U*8XcA%220Shl&To*ZHN4?71G*)nP`Dc7L_%e:L.23i>MoE$>C5?[5#&IMRXs-FK#m8:$
%p,FF&NgI(Ij\[^bJGkR_Pmen-9n?rYOic:mGa=!+CerI\m'ACF*F!og&J%2uZ5*KrmYJ&74IhNb48.dgU^).'*)6Zma#q4Q^r:$?
%l!n*FZ:gF*_I5!L,M\X@/njVq7p*=P1#bib]XT5HZlMo7oJfMZg2n^[\J6fUfNAHe"dPXo;]'(PA8@kYT,ik]E"keW*)AO'@#G^U
%,*!g<!?QVX+a_df%V6d2N:;]AY+E0!0An0YE[uhP6*f48[-UC0Y\1aCT[P,=njEo6O:;f_-7S"p7@^ht\=;Zep4R8_YDP<g="5u8
%";n`gJQ&7cM*3;(fX#UP,)ll98E(<7-n(6+_>;ek7YZq&[6u"?[9cfF&;HN;)E7CGiX@H_X@.9fb"*DUENT?i*r(f4Il,)r__cpl
%ccDH)"BLKV>bSSls+LLlYY[\c`/5]]SJU"]<R8.8_JU.`+FIJa9P?C1=:sL3=KZ;`*6bl0[A3q`3f4b(4"k%#_c*TrPSeb"%H;_!
%Xl8X;J-9$iKT_ZDBOt+&M%l=qTpRR!X>@AG_,6mnqn?usiXq7c`_4B=BIm9o=,)DqWfj"@LCg%.:J6Qjli9orD)s.Z1g6*i8:iJr
%.%F4s_B)H5_ElV%V.:l]-&0m2*Es-VkD[oB3(gJU\_>$aFE`bq@o>e-\:LRM!Ig9sjeLBs&k1d@LFE=Xa-5Re]16\K_)u8:_klEj
%Z]UXkpstKIZK;U+SJ*_l!Zee"CbQ('0*0^C@$#H'-"h?FoYhR\B45MDb-"][H%i=W6GB1?Ot.f_=?'e&^r4S`H^c-s[&rPCP)!t^
%+c9p>fX>`\EU\s-&j1cjJ[hO-RnAQMPjCjhO;k+CoARQp@bH]BQRg1&Ct*aE7.%L!"%.&4,V4;H+;AF7E>[#'P)G/s(cW&RkeK1b
%e(]L>"qP`f=EDVJUcB,'f@DuK`H=.]*gKGRQQ-,=\-;.:2X;?(>-cZk!<Uj=s"L_bd'5P`?h0nP=G,rQ8D'"ULkmif4P!39_@$/N
%f;R4m!\lO)$:"lYN<,4)9GM6cFIZASF".pS'-#+^2M\6/TdP:Qp/>rP'_[]2RUES.,K`I*!Q#Hh.7JD:/&b>m3,XLD8M3D]$KNFa
%f]*Upco+2C=cuonW9RM:']KQRTuZgYi81PL5\..;'MTp=NG#F<VqCY`Fh(ULp5N&-7!&`-P4+6C'-`lGX2R4jehaZ::4VuT`T4ld
%kt.fl9o?!?XjfhJ0in[4$bBLeI`PYS&Bb7_O,+W%n?0:LN73ibd?[5Lb-sD3ZH/.h56j,LGRV>q$LK_@4s:Z4.ia[`JPqE_l*-t<
%\]+Ql8FrVGS_;pE$n`i$48,DD,O11,le5:i+V%\U+Eh7H?s'oPDptseeO.1YitsTV9H-H0eAF[2&AO>%#b`^1&SA/68:\NXbe&n/
%:q@$_Jo;(>H@4P(Z%6=/@'KA:*Wm+bF,X:<lTAcH)dWlNpk7ZQM"Pd^_3L_H=J+,W>fXVc`_Ki1RR5M.Z1jXL8&t=Rc_YpRFlc45
%"P``e&G@3@Xpm/iI*i4pT4a-aQj[07M/tG"OU[,f7,ep"3aet,E41NJQkW.J=0#d08Mr>0C7pQ!*M>%[c38%$-9O9W/GbO_X!!0n
%,`b2Zin0G/?J8oK9OLE\<MT1%nGk0qj4eTZfm$2#I*&ES&q$(/Y^sKJ`BaL`Vf_Mt8J=I*Mp"bR4<k@@aG5:_L>!Xoa[N_j#%2sh
%fpre-SJXOZ'Cq_^VfJnJ"s1YE%nD$jQt$8J>9=5#Z5-e)e!/c"Z8oFL&GD8fRI`",Fcil23'C(WbEb,qQ>;8X4bdI*,#8Pp;8^]O
%`s!SV^G2gkUZ@'@5?q*'"80`TEi%XE%g+PV,fJ2N+]]:*aW9GYEFrge?]C#j(FJceK]`uearCtD4GU^?R(=i]/C_CE1)_Q**lJhL
%M%P>i.E5o:JOsB[5q%tOB=l0MRu&?=V?*CD=3)1")9\Ru(7fj=O]6^Z4ja&dl6X`I7m7CFBu/s;+!sKO30-GE^E.Z?*^\d1EKtA[
%/l2[4$mI^96$sG.abCDnPZlM.poYDEOrm<]1WnR5UhtnkcVbjf'1pQ4-:``E2/tX.`D1UfZ<>UEUkq_Zn14Y(P(*q5N"nG^'l"e6
%`:o:2:Qclk;3/3ukP.Gb!]iG^>!d?S?inQ\EhJ>="JI[2U(Is$paLFlk%I)R`+AjC>*3e7:DacX,msi@9T28Uc(%jLBq$B2,<P*3
%E(h8]qaEl/*I,^b8\-9m1ph$fX!:d2W"S4hJe/Rb4mW"UJc4NSSooM"WF-GR!`GoW.pVRW'Ns+FEn!X'!5b.*@Q50.0U/>g4GSK.
%b8k`<A/$1UTeo2i)@"=5Tp6dW-mfa_dBlT*TIW;).K)T$)=Dd2k<K/4ZB5A.f"H4(aHZsuo1$57ZV+V`$R8O<KpY%W#-"/%cWYPR
%J:2+&+;s5I31c+5E(2--1(`(Ll>^;r"jP5*^dc`!`AKHW0.<j@-Fd:dS=DOhF2Bo6&A%cjU,:`BE2^]qj`L#a+r'7^'U@3R/Haqh
%m-(.)bENN(ktt:h`Uiepjh%%-&d/q/`[-H&B.fik)dm/1,S:N0OKh]BJ:iMd&A<_,jK`7:;%A6kTX1nYR#>"T:>=V8i,[q(,kPXZ
%G2W]hcN(9c\YDBk%liQL%OsP<A'6:>+GZW">q+X[^4a'S>hF`-&?P4+j1U#9jel)<CA<su*.;;\Nk6V8GU"CP^^kEjLE(%t/+=,c
%N=fe\B]cIXgoM617"[#=XnBe;CUkGQ6STskqSTY516u5k0';9MY%2s:0oGLmGa8a:OA*r"4q7ggE;9ZB2kUR.+CUbc-<Q@<a1`[V
%IK`?,U-a$'_!"_$<>3`r2rr`/6@W'V"VsGaLmCG$VY0&&4l/E_/Y(VB[O'oR>h5o[PBceVKIV@o&\1n_EC56@^oF+]-P\sXk('4`
%dt^7j/XUs"5>!,^J\tYGVa(6uE:,9U4[@s.`f#ercbb+2pc^^@S*$2+:g@q3LiLcK`Rn=?UBW@&6P_iRT7M\9LarKTTRnj;4&pYQ
%&ZME]ip#A2R1&4G#_s)#>`L9X@ZF"$M6q<gN$':\SB3)\-fEhgN>)a,jbVtd<fdY71@<_`ILHdAY5i*U8P*K,`-+@,@(a:@T<akm
%>GI;G70s3F4@R-h6S^HQ<d8U6&?V>kR8md%q:67>HidB2>Z0]I-)J/b?knQG6[<LpqKBiJV9PkrhdPN$,/ErbBWgoh&<L.FLAY]0
%:d?F0E<.0r420Y[.@+5lM$U0;G/@lAa^D&,#ip">37(?,Y8q)@JXHLV*B\4'Q]1Fi+^.dj343'K*[$@r5U&0uQP1l#*"%FYdZrHL
%#K9eVN4@<hO/\Y`L:P101roESC;eCUho;')hqf7R;o9DN<cZe<*/"r#A=8#L/$_T2:<MTD>?-@#;Br,mb$`0XckM2(21Va;phhE(
%RYImUic^O\=rkPcpdQc=Ym*E??gYakG2TpWf@@[bMRZbCi'[cR`JP8hndu-te7Co-ES:^)gn69d:L>H!rU&jZ*nfY"$gt+S.N;-j
%B-X#:^E>/QUU_@GOUVjAk"6oV1'\%m8N]VR>9pN0`>pm>)lk]fCIF=tN+\]s`,U)pqT"jc;Yp_Q*,7s)7E7g5($ou<"(S&Y'mp::
%To'Qk22:49^s6,V,2Y3:b*G$W7Nn'?Op$O@k8'tn3Lmh1CC1W$(?Xg''IfII?r!.(%T"ijE7:G109E.AF]Eg$.-h0@bOp6QCe)4K
%cg[A8$%Z@E_Hb3dJ5Utl+ZNIu&j>6OZ<S:]C#]\F1b`\Hg!]qi!uL9<fdeIiOp/c_nS-T);PXp:E,^4s.Ks^YK3.dKc7"E9j@U0o
%4*8#rS2b*`Ir6[;8!b*E"6Ba08'!!8;C9:=h]W6CA'0lI5n74@+VO_1Eh`h$g0F6pg(K:@?.CG8nX3;e#PL;5?9sPp!"G@^YlC4H
%!l.g3=Y;f@`o9Sp5EIrn\BKD'm\Ed/'*)JTaDL,"Wk`f<6:rkkk<):;hmT$]O]tR@$W/YiQigBnPrO.ON"N:R/qFYT*^2ZIHml^I
%pdO\B/!]"^<sVL=`Jc9iRg0K>AZ7D@*,VGuaO9,'.]']p[9Sj0kXp(:(Woq(K&F+L$sJO=dDS'qa!O-Ko&D@7M"q=s&Zh1o^Y;YJ
%ca@2;9LpQ4\WL(hS'O\ZeNaHDBRuB130m%84FfftLX\8nMG"PkR`j?!dir?nA::(>6o6r`m*$C#F<:7,fF0Ps3kbnJJmQZ@GHU>=
%D8'8I$c>SS\1tL9%ZEt0\Vc+,$s6(g,-)gq?TH2R&%2t>C%*[+@TB%khAj(.ii7'\'9%Ir8kLW:^3^@k13eHH:/*]T+sV=-QMDuh
%\DkHY8A<$E([r9H+!/<&fH-u9+nB"c2DYD9Z>M[X*s#eTX<:RP3dg<,[GZ'u)\1<I)p1h7TY,pB>>e[O94C<J7Io9/Y/O(AP)PLa
%/(]HIYaT`p(nFp)`i"EM31sjNJ\s9ICA)&E.1Z>s7A%_Qq"PmP%a0EKq&CNdk8Ob(5V<qH$&`'^)KF+Obf"_5L_Uh1;WCtp#Ueq9
%*ifBiO\1FO2(6JY<0[Hk"4Z57V8;77.[7;(:kI2XBNm".[;Lqqm(u"=)[G^W+CmnXHG>X)7ss3TMeY7F[384Vj:t5rJ-22hDFh<t
%3f4#8&;VKM*^%Hm:ihB])2,GQ*mVR1M;&B:M""^prP@.AlMt!PF*Y34YGCiQ9E@LO8KtWrH@5ttgkiAqpd,QjP(63J\sEt',F!lB
%i_4>[c&IC&Od!TYOjhA01Ck(aAADU^5mi<B_W1NB4aYci!m#aj+^Y;0Q*M3.nd?/kO'X1"h0fs2:0EIiECZJQ08+>%77#SZ1j9Xk
%O_bKdMF"s.`0KVHJFD(:2GjMJV#_CZ#;SF!ZOM*E8fihO4"ERc/;S05K8\_0gnZD3hp;W0^dB4\s2%p?D)OHl;V4WV3MAZ<KR'O/
%$?+7_U:!Gl.<psp7"e>q+HN$.:FtZ7[JpLQES(<>C=:66?k:69JI:iQj(;:Y=W8Dp#\nmsB+pjn#%WR2#V$=(K5-Oga/V"9e:?4@
%U-q<V"EZi;X4cHi-9R<HZ@FZKJ&XAQU;tW8`!f)f,f4c8h,`qmjNG?G76oa6p:ad`KU.^:.`PSbb(,+a<ehiPfN>!bEp/fF:>m]]
%>aH%Y,0ur1BL.[6]82!*jOrKi)c!'Xi[k/V;rViYlZ7m&)K8J^2:t_sBbp2<M0mg+&T:anLP:]l3<pNsf:r&NTk0k+Mh1=+0q=_*
%j0NkQcPb6cZ;t^V6R9#K.;n.m"5$h6mQ0&S/&24+B3l/(k(,%,_8%eDec&Z!L\CQC+=4'Dn>R9`mZm";T"S52%ZisJG$m#=1]lW,
%,O0[[A2oXB938%;iS(9XUs2Eg]0SE"MCUTHeTAYJc]Q(_*!Xi)NK$=M-'2oME$58R!jo2\5f?I^E'iL_hq5KHfPt1oGV7?mk_Y$,
%kPZ5EN=>nU1'e)FJnR)85aIBD3p>J!f!k@`C0;lo\o6-$H`QGuZQEtbSWS4N]'k%bL8[glU$5H@4fbB@P'bDNbA2"G#fq-O.Fdp#
%&Gj#iq.H:7j`OUhUFI[]-'Cq"e1*5t'<\X.`X@F`qG0c4r<?_'G"!U\km^6\'M$"t/#KC,@&B%Tjq^*9//E(W4EPI"723-T:qc$5
%Iee0cSa4gm#(JKcH/:4T>J7c`LCKAg"TM%N5fcr>fb@97n6kA>iF1K'TV*`S3<gb/GoWjR.C*")gq"!W$Qr)o3W_80D,[).T]]p$
%X3b$=$Pgeqm&WO^@1Sif\:=o*'=Dhb@X?t/aePZTe]iqWbGZrYYqTCDVA&A=XfEJlBn2)u^4Q(&8jiPT>QN[3(A8.5J(g3T,oVp$
%G+b.#Ytq+E/&2<&V.0;o'p^WU^Js#_+6)2=D@KWmRN$\LO<pgp?+$FWE1lE%U43Wi:X*/Y;!;>,cW3Y(/K)[BP%l,\mAR$IeJ)(n
%X/$jS9u1^)%:iTu1P?D/X\K"T(-k/6pPeHNp=?h0&hL&p(AFr76th8VbM_VrCf%_/)bOEGdH[Q8E9.o]]&Lj'&s*f0E>0g'Kc'HG
%`E(R(Tg#R.PV_N7<pd;p.Z7+&HKk+Z.bLk:\p*\)2i+fMV-qI6;05j5"*.ctj@(9LpJ:(+Qb-HR0UD!"V<pV,etOS??g^7U8[QkN
%P\o]H%%mXoI`u]6g[4<F0?lOTYhCL.O&o.bs![PVPDRdf\N7K3+?=AF';.7shIWRM8j2+uA8L8[CBq>4gH=%67sH?G]XOp=\i?gr
%YhCK?W9`\`>G=Uop-]I8!N)OP6=QSIkZ@Fk8;Xe.XVW6!4G%I(EjVGu$@V9m_8`ZL6J5:S-.eRU^EgrWi:@,smgcn7gUd!RpUc^c
%nA"^j]W^/[s2IGnRdSa%&3dP/daditS6YD$]W2$W'#Z5bM]k"uGq)tf2J,\7C)R5,<8!h5&j$94k!iur>5:]Pltho[+XuQ=n>(eC
%?A#E`f:\G9+K!M-&:P5kn):YFXONtD=WIro(,OPW2-iHaA.,J1,.poJ2b_<$gm%#^_E810Z7N/AJ:\4t<pAjJ7*j\f=<_l,`%NdE
%7Z[8&;M'4F,X(@Ml+K`4JIir('dt('Q`7?kWm51:WcVQ`oLc@RS[TKToAF6JWhsGdoA;'`ZPb)H4.i"\f8JPaQ'H>U\d1t:9Z'S6
%!QA(Z[1A7O?NWOq%93")VGmgnCk,R)e_c`0Tp_dS4r>$?nA.Y>a>jU_dX_a*%scQ>(28@jA5o/Hh:.CLX]*DHa:QZU_B`Ti9Tu.u
%FIG[TQ)ZscbH1,``"[bD0r7EOTVgBH58hS-+C.?DfdO/jGp$36^>64i%/jPUA!Q"+!a[8U-=CFF<(GAh?/=,"8jr+'Z%i9lX+1_.
%gPqV3`JB1fm'NaICl6"l/+^J?EGj?Z8Ec9\0[gGZT*:Z-h&!Qj[,1$7nin6;!NVt!80:O3-nn)KU:;]/E+K1m'p/ksYQ1fJ2??)u
%!"WcgR9BkhLh0oPe?5GLKNh_*j9$5sXm)'t<&]Kt_8(>>#;`H]S',=bE`KblJ)J#7DEntGDl$oAF)7t3,N[9ARY]6"7,Pl1%Jf!M
%_/"eVe;/jCAaOc>5n:dYD-"jCl]e4^1iRg?@Sm[]mD<Rl;&goh=p]]2L!Dl`_W#^0L%ri'VNqi<G#ufPaf+-_/KuL@[qM"XE?(gS
%hN=*?7*MpM!i1.+1nPGp1a0e;h#`PpEDSKhEY+nAH3A4K'Q>q/FpT6NV'#;>m<EAGQ23FQFS3nh"bJcc(+fg;/A#<n#p,&;:Q2`T
%c`+4JR,SE<#J'k8]u(6J?4l&ANR,[`DJ;6#aB>CW,o*jGKdbV3WDfNHlU!_;g,1J4^Rgo/22A3Y1TOt+BqR(Dkcm=_E\%*NfZ9*;
%hK6qOSM.BC+kUE!Til9%`MEl'&n@VnLF5(a_Q;i6DI\2\B7tfa!c<pcE:B-,K`]_iH]Me##_FJrhj=g!&W"bFP"l,)Uj]afY`+KS
%M6QeL=%0]>"hh4al_qJTBLi(sZDl1,^8>b\#?"jr%]_sS":CF:9k[O0b0\E>?J^i^%+R=Flt1r"]SkVKeLs%HN'^5nhn;mH\sXUu
%<:B$?HoZ-o#fU5qQ\_00"M^U>;D%"l4&>D";rcL[<+jWCB6pBK5^Jp7ocpAsXs#>I#Ct.BicmdM(3\8=V&R-]@$S@DbGa+QM)dL.
%8Wq)Veb.ID>(p?+[59/g$MVOYP$:"8%37*5+-%SrBq1bYiYcN(Xh4JY1uhqEAkStiN&/-kX@&*$N%cSb;KY1bE9]AnRm_FhVd$4r
%NqFkf)<#S_I%)E;_BoeO#oPCm*9G7sAUN9jZpPd&c7s[mg(B2L5)8QH?3,O-P"hafmVrI].<GYS7-I1+KqU\%^'XHrp_-*s,LqRd
%`cbrb1%*m2C5mfhk]I%qW:h(bW@W6`O%fo)B'BW@*"rqabUaQl`iS@Rn'#P3#A0Lmj"mG\8mKAL!C`kCON[\DJ+W?f'nEb]p\"C(
%e<<g7j_&6JMh?c`L:4E,Bg;&`$fM<()k@R_&KAHaq&M#'L8"o'L3"5`&=NAmn^V0\)1_66^kPBT#-@bXh&AbF\fY:cDGN19YkTEq
%4i813:tUPXT/1B.&9k&YlLCqQ!u=Z=<1@m\h^uD9OE2<]#65`)X*FT$`SsCVrL&pr%\(Q[K]1qeNoVqscfs.,67cFpOrW.-<UE"+
%%0g'*9"-+gIIHKVJtDOo`Iu2N<Fu-D]sD@(DOf/"UaT;UiA/tc#>37Ylj#;emd['_`7N72DK7X\[]gCo[mQnQ[U+1Qc4Y\j6dO87
%MiA'ONm(Zd18-kICN-.k*=(*am:f&[TC%HbV!hO4`u/)r0`U(S:fkY7k.7,;(da,.h.@R@Ed*`MX/X`\;RX)#*[-/+e%mt.5CaUk
%P#s[C6e$[!6([)4I[Tbe\J_\rL]WH0J=t"p?@r_e4j9e;Nlg=kf\95ua/\Y3aA/ltXsW(>dQ5M?j(a*$_5Zh36q)M7jI6+N9K%tX
%@Q7k=Z-K:,:mNG7GE%EEp[Z+^/!aj,;1=CDgR)D\-m(bLY&S>Lpe!CK!`.)NWe62rD+6BN1QaY5egU;ESh'sr8Ea%L(oa**YNWWP
%'r&!5Gt<s;l<4scMScL2^1H,rOifci`?R9@lT)*oRZ>7"f!t!B==6[24g'p4*O+A/*="L)"N)h;055(`-pYo?lro]mP)?\j@O*0\
%XN*T\'H0Ls7UG%_NrO*"]=O`5#6?;g\#@N(`O&SaLe/`C6)^,%W4W3AZ>#S!8n]PM./I^*8jN#Jhoj_2MCem\U;p<nkE+(7o/-ss
%<HntB&OMHQT2dU,4am:!\P;Q^2?:B5Pqtm0&FfOaMs0=`YnFYF!B5q4U*sZH2k1BcN9b<)Z&<`4MEh<FfAl*!?R59PpJKo3=pZqn
%=(-)f&S$\?4M3\R6nCC[)HO4R^Y4jBq9_1[,8m<%916HB'ns!]PRuZ\I`\(iULr705,_Hl)[+;R#M;c-Oa@dr(UIg9JMeZEKUSk'
%a/'EUT3Xha6Z!g+Hf>$3/N#A4&'dUgb(?1K;eMDbgj;C\([ilk8c#L;CoW>%W.A-jUG0LT0"=m>?Wq<_LoS&:i+9`WDT>M&CYg"a
%S@=El#YSa4Pi8"'3"(0*JZYGO1kOQm)6/_/7!IBC(AEcGTYU3X'fq\8^k>.sD=pGZc/KP%M4'(Z*49uT4seA4eH@WY9Z@-!'+PA?
%0,McH!/]g3`X*a9Ydd9%b$c%1B%Pf/N2&k(Ki,VpXrN6I$[HRBVi\1MNmr9tnOq;q8XuoWR[V-ER,gDAYD@F%gYOH;/8^8XaE^c+
%Ng_l\N54=Yh2%a.PX=-E)mVGRb;;knh?LDm6<K%[P<+@,!GX%qP`6CS;lcTVK,%`"n97>D!-)mUq*G0h3;FDn,:i6k>HP@nL0($%
%JMAs/mMS=EW54A?d.HakY!b:IVU&h'E8n<E"$B)&5Q(?=McYE)9E3%V++F4JmH;NNY?tXk=+>Somd]`fhu;s?j2[K>hL0_IoQ^-(
%_["`,++Lmd\pO2An^G7&rV1X3l(>`i7i%Y;45n_jn,E1^b8:0^-^C64~>
%AI9_PrivateDataEnd
